#!/usr/bin/env node
/**
 * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ ServerManager —Å TaskExecutor
 */

const path = require('path');
const fs = require('fs');

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ ts-node
require('ts-node').register({
  project: path.join(__dirname, 'tsconfig.json'),
  compilerOptions: {
    module: 'commonjs',
    target: 'ES2020',
    esModuleInterop: true,
    skipLibCheck: true
  }
});

// –°–∏–º—É–ª—è—Ü–∏—è Logger
class MockLogger {
  info(message) {
    console.log(`[INFO] ${message}`);
  }
  
  warn(message) {
    console.log(`[WARN] ${message}`);
  }
  
  error(message, error) {
    console.log(`[ERROR] ${message}`, error || '');
  }
}

// –°–∏–º—É–ª—è—Ü–∏—è ConfigService
class MockConfigService {
  constructor() {
    this.servers = {
      servers: [
        {
          id: 'test-server-1',
          name: 'Test LLM Server',
          host: '213.181.108.221',
          port: 39166,
          user: 'root',
          sshKey: '/path/to/key',
          deployPath: '/tmp/llm_deploy',
          llmPort: 8080,
          status: 'disconnected',
          deployed: false,
          connected: false,
          lastCheck: null
        }
      ]
    };
  }

  async getServers() {
    return this.servers;
  }

  async updateServer(server) {
    const index = this.servers.servers.findIndex(s => s.id === server.id);
    if (index >= 0) {
      this.servers.servers[index] = { ...this.servers.servers[index], ...server };
    }
    console.log(`[CONFIG] –°–µ—Ä–≤–µ—Ä ${server.id} –æ–±–Ω–æ–≤–ª–µ–Ω:`, server.status);
  }
}

async function testServerManagerIntegration() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ ServerManager —Å TaskExecutor...');
  
  try {
    // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º ServerManager
    const { ServerManager } = require('./backend/services/serverManager');
    
    const logger = new MockLogger();
    const configService = new MockConfigService();
    const serverManager = new ServerManager(logger, configService);
    
    console.log('‚úÖ ServerManager —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ');
    
    // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏—è
    serverManager.on('status-change', (data) => {
      console.log(`üîÑ –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞ ${data.serverId}: ${data.status}`);
    });
    
    serverManager.on('deployment-progress', (data) => {
      console.log(`üìä –ü—Ä–æ–≥—Ä–µ—Å—Å —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è ${data.serverId}: ${data.progress}% - ${data.message}`);
    });
    
    serverManager.on('progress', (data) => {
      console.log(`‚è≥ –ü—Ä–æ–≥—Ä–µ—Å—Å ${data.serverId}: ${data.progress}% - ${data.message}`);
    });
    
    serverManager.on('log', (data) => {
      console.log(`üìù –õ–æ–≥ ${data.serverId} [${data.level}]: ${data.message}`);
    });
    
    serverManager.on('connection-tested', (data) => {
      console.log(`üîó –¢–µ—Å—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è ${data.serverId}: SSH=${data.sshConnected}, LLM=${data.llmConnected}`);
    });
    
    serverManager.on('server-ready', (data) => {
      console.log(`üéØ –°–µ—Ä–≤–µ—Ä –≥–æ—Ç–æ–≤: ${data.serverId}`);
    });
    
    console.log('‚úÖ –°–æ–±—ã—Ç–∏—è –ø–æ–¥–ø–∏—Å–∞–Ω—ã');
    
    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–µ—Ä–≤–µ—Ä–æ–≤
    const servers = serverManager.getAllServers();
    console.log(`üìã –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Å–µ—Ä–≤–µ—Ä–æ–≤: ${servers.length}`);
    
    if (servers.length === 0) {
      console.log('‚ö†Ô∏è  –ù–µ—Ç —Å–µ—Ä–≤–µ—Ä–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
      return true;
    }
    
    const testServerId = servers[0].id;
    console.log(`üéØ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–µ—Ä–≤–µ—Ä: ${testServerId}`);
    
    // –¢–µ—Å—Ç 1: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–µ—Ä–∞
    console.log('\nüîß –¢–µ—Å—Ç 1: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–µ—Ä–∞');
    const status = serverManager.getServerStatus(testServerId);
    console.log('–°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞:', status);
    
    // –¢–µ—Å—Ç 2: –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞ (—á–µ—Ä–µ–∑ TaskExecutor)
    console.log('\nüöÄ –¢–µ—Å—Ç 2: –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞');
    try {
      const deployResult = await serverManager.deployServer(testServerId);
      console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è:', deployResult ? '‚úÖ –£—Å–ø–µ—Ö' : '‚ùå –û—à–∏–±–∫–∞');
    } catch (error) {
      console.log('–û—à–∏–±–∫–∞ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è (–æ–∂–∏–¥–∞–µ–º–æ):', error.message.substring(0, 50) + '...');
    }
    
    // –¢–µ—Å—Ç 3: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É (—á–µ—Ä–µ–∑ TaskExecutor)
    console.log('\nüåê –¢–µ—Å—Ç 3: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É');
    try {
      const connectResult = await serverManager.connectServer(testServerId);
      console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', connectResult ? '‚úÖ –£—Å–ø–µ—Ö' : '‚ùå –û—à–∏–±–∫–∞');
    } catch (error) {
      console.log('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è (–æ–∂–∏–¥–∞–µ–º–æ):', error.message.substring(0, 50) + '...');
    }
    
    // –¢–µ—Å—Ç 4: –ß–∞—Ç —Å —Å–µ—Ä–≤–µ—Ä–æ–º (—á–µ—Ä–µ–∑ TaskExecutor)
    console.log('\nüí¨ –¢–µ—Å—Ç 4: –ß–∞—Ç —Å —Å–µ—Ä–≤–µ—Ä–æ–º');
    try {
      const chatResult = await serverManager.chat(testServerId, [
        { role: 'user', content: '–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?' }
      ]);
      console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç —á–∞—Ç–∞:', chatResult ? '‚úÖ –£—Å–ø–µ—Ö' : '‚ùå –û—à–∏–±–∫–∞');
    } catch (error) {
      console.log('–û—à–∏–±–∫–∞ —á–∞—Ç–∞ (–æ–∂–∏–¥–∞–µ–º–æ):', error.message.substring(0, 50) + '...');
    }
    
    // –¢–µ—Å—Ç 5: –ü–æ–ª–Ω–∞—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
    console.log('\nüéØ –¢–µ—Å—Ç 5: –ü–æ–ª–Ω–∞—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞');
    try {
      const readyResult = await serverManager.ensureLLMReady(testServerId);
      console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏:', readyResult ? '‚úÖ –£—Å–ø–µ—Ö' : '‚ùå –û—à–∏–±–∫–∞');
    } catch (error) {
      console.log('–û—à–∏–±–∫–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ (–æ–∂–∏–¥–∞–µ–º–æ):', error.message.substring(0, 50) + '...');
    }
    
    // –¢–µ—Å—Ç 6: –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
    console.log('\nüîå –¢–µ—Å—Ç 6: –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞');
    try {
      const disconnectResult = await serverManager.disconnectServer(testServerId);
      console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–∫–ª—é—á–µ–Ω–∏—è:', disconnectResult ? '‚úÖ –£—Å–ø–µ—Ö' : '‚ùå –û—à–∏–±–∫–∞');
    } catch (error) {
      console.log('–û—à–∏–±–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è:', error.message);
    }
    
    // –§–∏–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å
    const finalStatus = serverManager.getServerStatus(testServerId);
    console.log('\nüìä –§–∏–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞:', finalStatus);
    
    // Graceful shutdown
    await serverManager.shutdown();
    console.log('üèÅ ServerManager –∑–∞–≤–µ—Ä—à–µ–Ω');
    
    return true;
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error.message);
    console.error('Stack:', error.stack);
    return false;
  }
}

async function testTaskExecutorEvents() {
  console.log('\nüé≠ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π TaskExecutor...');
  
  try {
    const { TaskExecutor } = require('./backend/services/taskExecutor');
    const logger = new MockLogger();
    const executor = new TaskExecutor(logger, 1);
    
    let eventsReceived = [];
    
    // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –≤—Å–µ —Å–æ–±—ã—Ç–∏—è
    executor.on('task-started', (data) => {
      eventsReceived.push(`started:${data.taskId}`);
      console.log(`üöÄ Task started: ${data.taskId}`);
    });
    
    executor.on('task-progress', (data) => {
      eventsReceived.push(`progress:${data.progress}`);
      console.log(`üìä Task progress: ${data.progress}%`);
    });
    
    executor.on('task-completed', (data) => {
      eventsReceived.push(`completed:${data.taskId}`);
      console.log(`‚úÖ Task completed: ${data.taskId}`);
    });
    
    executor.on('task-failed', (data) => {
      eventsReceived.push(`failed:${data.taskId}`);
      console.log(`‚ùå Task failed: ${data.taskId}`);
    });
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞–¥–∞—á—É
    try {
      const result = await executor.runDeployTask({
        serverId: 'event-test',
        host: 'localhost',
        port: 22,
        username: 'test',
        privateKey: '/test/key',
        deployPath: '/tmp/test',
        llmPort: 8080
      });
      
      console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–¥–∞—á–∏:', result.success ? '‚úÖ' : '‚ùå');
    } catch (error) {
      console.log('–û—à–∏–±–∫–∞ –∑–∞–¥–∞—á–∏ (–æ–∂–∏–¥–∞–µ–º–æ)');
    }
    
    await executor.shutdown();
    
    console.log(`üìà –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–π: ${eventsReceived.length}`);
    console.log('–°–æ–±—ã—Ç–∏—è:', eventsReceived);
    
    return eventsReceived.length > 0;
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏–π:', error.message);
    return false;
  }
}

async function main() {
  console.log('üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ ServerManager + TaskExecutor');
  console.log('=' * 60);
  
  try {
    // –¢–µ—Å—Ç 1: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è ServerManager
    const serverManagerTest = await testServerManagerIntegration();
    
    // –¢–µ—Å—Ç 2: –°–æ–±—ã—Ç–∏—è TaskExecutor
    const eventsTest = await testTaskExecutorEvents();
    
    console.log('\n' + '=' * 60);
    console.log('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:');
    console.log(`   ServerManager –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è: ${serverManagerTest ? '‚úÖ' : '‚ùå'}`);
    console.log(`   TaskExecutor —Å–æ–±—ã—Ç–∏—è: ${eventsTest ? '‚úÖ' : '‚ùå'}`);
    
    const allPassed = serverManagerTest && eventsTest;
    
    if (allPassed) {
      console.log('\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!');
      console.log('üéØ ServerManager –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω —Å TaskExecutor');
      console.log('üìù –ì–æ—Ç–æ–≤–æ –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å IPC –∏ UI');
    } else {
      console.log('\n‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å');
    }
    
    process.exit(allPassed ? 0 : 1);
    
  } catch (error) {
    console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
if (require.main === module) {
  main();
}

module.exports = { testServerManagerIntegration };
