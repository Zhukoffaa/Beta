#!/usr/bin/env node
/**
 * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ UI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ Windows LLM Agent
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ–º–ø–∏–ª—è—Ü–∏—é TypeScript –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
 */

const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');

console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ UI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ Windows LLM Agent');
console.log('=' .repeat(60));

// –°–ø–∏—Å–æ–∫ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
const components = [
  'renderer/src/App.tsx',
  'renderer/src/components/ServersPanel.tsx',
  'renderer/src/components/Chat.tsx',
  'renderer/src/components/LogViewer.tsx',
  'renderer/src/hooks/useIpc.ts'
];

// –°–ø–∏—Å–æ–∫ —Å—Ç–∏–ª–µ–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
const styles = [
  'renderer/src/index.css',
  'tailwind.config.js',
  'postcss.config.js'
];

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
const configs = [
  'renderer/webpack.config.js',
  'renderer/tsconfig.json',
  'package.json'
];

let passedTests = 0;
let totalTests = 0;

function runTest(testName, testFunction) {
  totalTests++;
  try {
    console.log(`\nüîç ${testName}...`);
    testFunction();
    console.log(`‚úÖ ${testName} - –ü–†–û–ô–î–ï–ù`);
    passedTests++;
    return true;
  } catch (error) {
    console.log(`‚ùå ${testName} - –ü–†–û–í–ê–õ–ï–ù`);
    console.log(`   –û—à–∏–±–∫–∞: ${error.message}`);
    return false;
  }
}

// –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
runTest('–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è UI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤', () => {
  components.forEach(component => {
    if (!fs.existsSync(component)) {
      throw new Error(`–ö–æ–º–ø–æ–Ω–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω: ${component}`);
    }
  });
  console.log(`   –ù–∞–π–¥–µ–Ω–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤: ${components.length}`);
});

// –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∏–ª–µ–π –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π
runTest('–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∏–ª–µ–π –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π', () => {
  [...styles, ...configs].forEach(file => {
    if (!fs.existsSync(file)) {
      throw new Error(`–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${file}`);
    }
  });
  console.log(`   –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: ${styles.length + configs.length}`);
});

// –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–æ–≤ –≤ App.tsx
runTest('–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–æ–≤ –≤ App.tsx', () => {
  const appContent = fs.readFileSync('renderer/src/App.tsx', 'utf8');
  
  const requiredImports = [
    'ServersPanel',
    'Chat', 
    'LogViewer',
    'useState'
  ];
  
  requiredImports.forEach(importName => {
    if (!appContent.includes(importName)) {
      throw new Error(`–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–º–ø–æ—Ä—Ç: ${importName}`);
    }
  });
  
  console.log(`   –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ –∏–º–ø–æ—Ä—Ç–æ–≤: ${requiredImports.length}`);
});

// –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ö—É–∫–æ–≤ –≤ useIpc.ts
runTest('–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ö—É–∫–æ–≤ IPC', () => {
  const ipcContent = fs.readFileSync('renderer/src/hooks/useIpc.ts', 'utf8');
  
  const requiredHooks = [
    'useIpc',
    'useServerManager',
    'useLlmChat',
    'useLogs',
    'useTaskProgress'
  ];
  
  requiredHooks.forEach(hook => {
    if (!ipcContent.includes(`export const ${hook}`)) {
      throw new Error(`–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ö—É–∫: ${hook}`);
    }
  });
  
  console.log(`   –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ —Ö—É–∫–æ–≤: ${requiredHooks.length}`);
});

// –¢–µ—Å—Ç 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ Tailwind CSS –∫–ª–∞—Å—Å–æ–≤
runTest('–ü—Ä–æ–≤–µ—Ä–∫–∞ Tailwind CSS –∫–ª–∞—Å—Å–æ–≤', () => {
  const cssContent = fs.readFileSync('renderer/src/index.css', 'utf8');
  
  const requiredDirectives = [
    '@tailwind base',
    '@tailwind components', 
    '@tailwind utilities'
  ];
  
  requiredDirectives.forEach(directive => {
    if (!cssContent.includes(directive)) {
      throw new Error(`–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –¥–∏—Ä–µ–∫—Ç–∏–≤–∞: ${directive}`);
    }
  });
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –∫–ª–∞—Å—Å–æ–≤
  const customClasses = [
    '.btn-primary',
    '.btn-secondary',
    '.input-field',
    '.card',
    '.status-connected'
  ];
  
  customClasses.forEach(className => {
    if (!cssContent.includes(className)) {
      throw new Error(`–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–ª–∞—Å—Å: ${className}`);
    }
  });
  
  console.log(`   –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ –¥–∏—Ä–µ–∫—Ç–∏–≤: ${requiredDirectives.length}`);
  console.log(`   –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ –∫–ª–∞—Å—Å–æ–≤: ${customClasses.length}`);
});

// –¢–µ—Å—Ç 6: –ü—Ä–æ–≤–µ—Ä–∫–∞ TypeScript –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
runTest('–ü—Ä–æ–≤–µ—Ä–∫–∞ TypeScript –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏', () => {
  const tsConfig = JSON.parse(fs.readFileSync('renderer/tsconfig.json', 'utf8'));
  
  if (!tsConfig.compilerOptions) {
    throw new Error('–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç compilerOptions –≤ tsconfig.json');
  }
  
  const requiredOptions = ['jsx', 'target', 'module'];
  requiredOptions.forEach(option => {
    if (!tsConfig.compilerOptions[option]) {
      throw new Error(`–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–ø—Ü–∏—è: ${option}`);
    }
  });
  
  console.log(`   –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ –æ–ø—Ü–∏–π: ${requiredOptions.length}`);
});

// –¢–µ—Å—Ç 7: –ü—Ä–æ–≤–µ—Ä–∫–∞ package.json –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
runTest('–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π package.json', () => {
  const packageJson = JSON.parse(fs.readFileSync('package.json', 'utf8'));
  
  const requiredDeps = [
    'react',
    'react-dom',
    'axios',
    'yaml'
  ];
  
  const requiredDevDeps = [
    'electron',
    '@types/react',
    'webpack',
    'ts-loader',
    'tailwindcss',
    'typescript'
  ];
  
  requiredDeps.forEach(dep => {
    if (!packageJson.dependencies || !packageJson.dependencies[dep]) {
      throw new Error(`–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å: ${dep}`);
    }
  });
  
  requiredDevDeps.forEach(dep => {
    if (!packageJson.devDependencies || !packageJson.devDependencies[dep]) {
      throw new Error(`–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç dev –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å: ${dep}`);
    }
  });
  
  console.log(`   –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π: ${requiredDeps.length}`);
  console.log(`   –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ dev –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π: ${requiredDevDeps.length}`);
});

// –¢–µ—Å—Ç 8: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–ø–∏–ª—è—Ü–∏–∏ TypeScript (–±–∞–∑–æ–≤–∞—è)
runTest('–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ TypeScript', () => {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –Ω–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏
    components.forEach(component => {
      const content = fs.readFileSync(component, 'utf8');
      
      // –ë–∞–∑–æ–≤—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞
      if (content.includes('import') && !content.includes('from')) {
        throw new Error(`–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–º–ø–æ—Ä—Ç –≤ ${component}`);
      }
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è JSX —Ç–µ–≥–æ–≤
      const openTags = (content.match(/<[^/][^>]*>/g) || []).length;
      const closeTags = (content.match(/<\/[^>]*>/g) || []).length;
      const selfClosing = (content.match(/<[^>]*\/>/g) || []).length;
      
      // –ü—Ä–∏–º–µ—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ (–Ω–µ —Ç–æ—á–Ω–∞—è, –Ω–æ –±–∞–∑–æ–≤–∞—è)
      if (openTags > closeTags + selfClosing + 5) { // +5 –¥–ª—è –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç–∏
        console.log(`   –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –≤–æ–∑–º–æ–∂–Ω–æ –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ç–µ–≥–æ–≤ –≤ ${component}`);
      }
    });
    
    console.log(`   –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: ${components.length}`);
  } catch (error) {
    throw new Error(`–û—à–∏–±–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞: ${error.message}`);
  }
});

// –¢–µ—Å—Ç 9: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
runTest('–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã React –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤', () => {
  const reactComponents = components.filter(c => c.endsWith('.tsx'));
  
  reactComponents.forEach(component => {
    const content = fs.readFileSync(component, 'utf8');
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è React –∏–º–ø–æ—Ä—Ç–∞
    if (!content.includes('import React') && !content.includes('from \'react\'')) {
      throw new Error(`–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–º–ø–æ—Ä—Ç React –≤ ${component}`);
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
    if (!content.includes('export default') && !content.includes('export const')) {
      throw new Error(`–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —ç–∫—Å–ø–æ—Ä—Ç –≤ ${component}`);
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ JSX
    if (!content.includes('return (') && !content.includes('return <')) {
      throw new Error(`–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç JSX return –≤ ${component}`);
    }
  });
  
  console.log(`   –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ React –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤: ${reactComponents.length}`);
});

// –¢–µ—Å—Ç 10: –ü—Ä–æ–≤–µ—Ä–∫–∞ Webpack –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
runTest('–ü—Ä–æ–≤–µ—Ä–∫–∞ Webpack –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏', () => {
  const webpackContent = fs.readFileSync('renderer/webpack.config.js', 'utf8');
  
  const requiredConfig = [
    'entry:',
    'output:',
    'module:',
    'rules:',
    'tsx?',
    'css',
    'postcss-loader'
  ];
  
  requiredConfig.forEach(config => {
    if (!webpackContent.includes(config)) {
      throw new Error(`–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: ${config}`);
    }
  });
  
  console.log(`   –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π: ${requiredConfig.length}`);
});

// –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
console.log('\n' + '='.repeat(60));
console.log('üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø UI –ö–û–ú–ü–û–ù–ï–ù–¢–û–í');
console.log('='.repeat(60));

console.log(`‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: ${passedTests}/${totalTests}`);
console.log(`üìà –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: ${Math.round((passedTests / totalTests) * 100)}%`);

if (passedTests === totalTests) {
  console.log('\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!');
  console.log('‚ú® UI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –≥–æ—Ç–æ–≤—ã –∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å backend');
  console.log('\nüìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:');
  console.log('1. –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: npm run electron:dev');
  console.log('2. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å backend —Å–µ—Ä–≤–∏—Å–∞–º–∏');
  console.log('3. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å IPC –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—é');
  process.exit(0);
} else {
  console.log('\n‚ö†Ô∏è  –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ù–ï –ü–†–û–ô–î–ï–ù–´');
  console.log('üîß –ò—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫–∏ –ø–µ—Ä–µ–¥ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏');
  process.exit(1);
}
