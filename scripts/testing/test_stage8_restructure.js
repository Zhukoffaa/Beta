const fs = require('fs');
const path = require('path');

class Stage8RestructureTest {
  constructor() {
    this.results = [];
    this.basePath = './';
  }

  addTest(name, status, details = '') {
    this.results.push({
      name,
      status,
      details,
      timestamp: new Date().toISOString()
    });
    console.log(`${status === 'PASS' ? '‚úÖ' : status === 'FAIL' ? '‚ùå' : '‚ö†Ô∏è'} ${name}${details ? ': ' + details : ''}`);
  }

  checkFileExists(filePath, description) {
    const fullPath = path.join(this.basePath, filePath);
    if (fs.existsSync(fullPath)) {
      this.addTest(`${description} —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`, 'PASS', filePath);
      return true;
    } else {
      this.addTest(`${description} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç`, 'FAIL', filePath);
      return false;
    }
  }

  checkFileContent(filePath, searchStrings, description) {
    const fullPath = path.join(this.basePath, filePath);
    if (!fs.existsSync(fullPath)) {
      this.addTest(`${description} - —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω`, 'FAIL', filePath);
      return false;
    }

    try {
      const content = fs.readFileSync(fullPath, 'utf8');
      const missingStrings = searchStrings.filter(str => !content.includes(str));
      
      if (missingStrings.length === 0) {
        this.addTest(`${description} —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã`, 'PASS');
        return true;
      } else {
        this.addTest(`${description} –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —ç–ª–µ–º–µ–Ω—Ç—ã`, 'FAIL', `–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç: ${missingStrings.join(', ')}`);
        return false;
      }
    } catch (error) {
      this.addTest(`${description} –æ—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è`, 'FAIL', error.message);
      return false;
    }
  }

  async runTests() {
    console.log('üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ Stage 8 Restructure...\n');

    // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ Backend —Ñ–∞–π–ª–æ–≤
    console.log('üìÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ Backend –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤:');
    this.checkFileExists('backend/services/fileIndexer.ts', 'FileIndexer —Å–µ—Ä–≤–∏—Å');
    this.checkFileExists('configs/projects.json', '–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–æ–µ–∫—Ç–æ–≤');

    // 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ Frontend –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    console.log('\nüé® –ü—Ä–æ–≤–µ—Ä–∫–∞ Frontend –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤:');
    this.checkFileExists('renderer/src/components/FileTreePanel.tsx', 'FileTreePanel –∫–æ–º–ø–æ–Ω–µ–Ω—Ç');
    this.checkFileExists('renderer/src/components/ServerSettingsWindow.tsx', 'ServerSettingsWindow –∫–æ–º–ø–æ–Ω–µ–Ω—Ç');

    // 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ FileIndexer
    console.log('\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ FileIndexer —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏:');
    this.checkFileContent('backend/services/fileIndexer.ts', [
      'class FileIndexer',
      'scanProject',
      'getProjectIndex',
      'searchFiles',
      'watchProject',
      'EventEmitter'
    ], 'FileIndexer —Å–µ—Ä–≤–∏—Å');

    // 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ FileTreePanel
    console.log('\nüå≥ –ü—Ä–æ–≤–µ—Ä–∫–∞ FileTreePanel —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏:');
    this.checkFileContent('renderer/src/components/FileTreePanel.tsx', [
      'interface FileNode',
      'interface ProjectIndex',
      'renderFileNode',
      'handleSearch',
      'getFileIcon',
      'useIpc'
    ], 'FileTreePanel –∫–æ–º–ø–æ–Ω–µ–Ω—Ç');

    // 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ ServerSettingsWindow
    console.log('\nüñ•Ô∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ ServerSettingsWindow —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏:');
    this.checkFileContent('renderer/src/components/ServerSettingsWindow.tsx', [
      'interface ServerSettingsWindowProps',
      'isOpen',
      'onClose',
      'useServerManager',
      'ImageServerParser',
      'backdrop-blur'
    ], 'ServerSettingsWindow –∫–æ–º–ø–æ–Ω–µ–Ω—Ç');

    // 6. –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è App.tsx
    console.log('\nüì± –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ App.tsx:');
    this.checkFileContent('renderer/src/App.tsx', [
      'FileTreePanel',
      'ServerSettingsWindow',
      'showServerSettings',
      'handleFileSelect',
      'selectedFile'
    ], 'App.tsx –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è');

    // 7. –ü—Ä–æ–≤–µ—Ä–∫–∞ IPC –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –≤ main.ts
    console.log('\nüîó –ü—Ä–æ–≤–µ—Ä–∫–∞ IPC –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤:');
    this.checkFileContent('backend/main.ts', [
      'FileIndexer',
      'scan-project',
      'get-all-projects',
      'search-files',
      'get-project-index'
    ], 'IPC –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏');

    // 8. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã projects.json
    console.log('\nüìã –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø—Ä–æ–µ–∫—Ç–æ–≤:');
    this.checkFileContent('configs/projects.json', [
      'projects',
      'lastAccessed'
    ], 'Projects.json —Å—Ç—Ä—É–∫—Ç—É—Ä–∞');

    // 9. –ü—Ä–æ–≤–µ—Ä–∫–∞ TypeScript –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤
    console.log('\nüìù –ü—Ä–æ–≤–µ—Ä–∫–∞ TypeScript —Ç–∏–ø–æ–≤:');
    
    // FileTreePanel —Ç–∏–ø—ã
    this.checkFileContent('renderer/src/components/FileTreePanel.tsx', [
      'interface FileNode',
      'interface ProjectIndex',
      'interface FileTreePanelProps',
      'type: \'file\' | \'directory\'',
      'onFileSelect?: (filePath: string) => void'
    ], 'FileTreePanel —Ç–∏–ø—ã');

    // ServerSettingsWindow —Ç–∏–ø—ã
    this.checkFileContent('renderer/src/components/ServerSettingsWindow.tsx', [
      'interface Server',
      'interface ServerSettingsWindowProps',
      'isOpen: boolean',
      'onClose: () => void'
    ], 'ServerSettingsWindow —Ç–∏–ø—ã');

    // 10. –ü—Ä–æ–≤–µ—Ä–∫–∞ CSS –∫–ª–∞—Å—Å–æ–≤ –∏ —Å—Ç–∏–ª–µ–π
    console.log('\nüé® –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∏–ª–µ–π:');
    this.checkFileContent('renderer/src/components/FileTreePanel.tsx', [
      'className=',
      'text-gray-',
      'bg-gray-',
      'hover:',
      'transition'
    ], 'FileTreePanel —Å—Ç–∏–ª–∏');

    this.checkFileContent('renderer/src/components/ServerSettingsWindow.tsx', [
      'fixed inset-0',
      'backdrop-blur',
      'bg-opacity-50',
      'rounded-lg',
      'shadow-2xl'
    ], 'ServerSettingsWindow —Å—Ç–∏–ª–∏');

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞
    this.generateReport();
  }

  generateReport() {
    console.log('\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:');
    console.log('=' .repeat(50));

    const passed = this.results.filter(r => r.status === 'PASS').length;
    const failed = this.results.filter(r => r.status === 'FAIL').length;
    const warnings = this.results.filter(r => r.status === 'WARN').length;
    const total = this.results.length;

    console.log(`‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: ${passed}`);
    console.log(`‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: ${failed}`);
    console.log(`‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è: ${warnings}`);
    console.log(`üìä –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: ${total}`);
    console.log(`üìà –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: ${Math.round((passed / total) * 100)}%`);

    // –î–µ—Ç–∞–ª–∏ –ø—Ä–æ–≤–∞–ª–∏–≤—à–∏—Ö—Å—è —Ç–µ—Å—Ç–æ–≤
    const failedTests = this.results.filter(r => r.status === 'FAIL');
    if (failedTests.length > 0) {
      console.log('\n‚ùå –ü–†–û–í–ê–õ–ò–í–®–ò–ï–°–Ø –¢–ï–°–¢–´:');
      failedTests.forEach(test => {
        console.log(`  ‚Ä¢ ${test.name}: ${test.details}`);
      });
    }

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –≤ —Ñ–∞–π–ª
    const report = {
      timestamp: new Date().toISOString(),
      summary: { passed, failed, warnings, total, successRate: Math.round((passed / total) * 100) },
      tests: this.results
    };

    fs.writeFileSync('STAGE8_TEST_REPORT.json', JSON.stringify(report, null, 2));
    console.log('\nüíæ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ STAGE8_TEST_REPORT.json');

    // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    console.log('\nüéØ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:');
    if (failed === 0) {
      console.log('üéâ –í—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã Stage 8 —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã!');
      console.log('üìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:');
      console.log('  1. –°–æ–∑–¥–∞—Ç—å OCR —Å–µ—Ä–≤–∏—Å (backend/services/ocrService.ts)');
      console.log('  2. –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∏–ª–∏ –≤ —Å—Ç–∏–ª–µ macOS');
      console.log('  3. –ò—Å–ø—Ä–∞–≤–∏—Ç—å –≤–∞–ª–∏–¥–∞—Ü–∏—é —Ñ–æ—Ä–º');
      console.log('  4. –ü—Ä–æ–≤–µ—Å—Ç–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ');
    } else {
      console.log('‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã, —Ç—Ä–µ–±—É—é—â–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è');
      console.log('üîß –ò—Å–ø—Ä–∞–≤—å—Ç–µ –ø—Ä–æ–≤–∞–ª–∏–≤—à–∏–µ—Å—è —Ç–µ—Å—Ç—ã –ø–µ—Ä–µ–¥ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ–º');
    }
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
const tester = new Stage8RestructureTest();
tester.runTests().catch(console.error);
