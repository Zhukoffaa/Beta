#!/usr/bin/env node

/**
 * –ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö backend —Å–µ—Ä–≤–∏—Å–æ–≤
 * Windows LLM Agent - Beta Version
 */

const fs = require('fs');
const path = require('path');
const { spawn } = require('child_process');

// –¶–≤–µ—Ç–∞ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
const colors = {
    reset: '\x1b[0m',
    bright: '\x1b[1m',
    red: '\x1b[31m',
    green: '\x1b[32m',
    yellow: '\x1b[33m',
    blue: '\x1b[34m',
    magenta: '\x1b[35m',
    cyan: '\x1b[36m'
};

class ComprehensiveTest {
    constructor() {
        this.results = {
            passed: 0,
            failed: 0,
            skipped: 0,
            tests: []
        };
        this.startTime = Date.now();
    }

    log(message, color = 'reset') {
        console.log(`${colors[color]}${message}${colors.reset}`);
    }

    async runTest(testName, testFunction) {
        this.log(`\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: ${testName}`, 'cyan');
        
        try {
            const result = await testFunction();
            if (result.success) {
                this.log(`‚úÖ ${testName}: –ü–†–û–ô–î–ï–ù`, 'green');
                this.results.passed++;
                this.results.tests.push({ name: testName, status: 'PASSED', details: result.details });
            } else {
                this.log(`‚ùå ${testName}: –ü–†–û–í–ê–õ–ï–ù - ${result.error}`, 'red');
                this.results.failed++;
                this.results.tests.push({ name: testName, status: 'FAILED', error: result.error });
            }
        } catch (error) {
            this.log(`üí• ${testName}: –û–®–ò–ë–ö–ê - ${error.message}`, 'red');
            this.results.failed++;
            this.results.tests.push({ name: testName, status: 'ERROR', error: error.message });
        }
    }

    async testProjectStructure() {
        const requiredDirs = [
            'backend',
            'backend/services',
            'renderer',
            'tasks',
            'tools',
            'configs',
            'logs'
        ];

        const requiredFiles = [
            'backend/main.ts',
            'backend/services/logger.ts',
            'backend/services/config.ts',
            'backend/services/sshService.ts',
            'backend/services/llmService.ts',
            'backend/services/taskExecutor.ts',
            'backend/services/serverManager.ts',
            'configs/app.yaml',
            'configs/servers.json',
            'tools/deploy_llm_server.py'
        ];

        let missing = [];

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—Ç–∞–ª–æ–≥–æ–≤
        for (const dir of requiredDirs) {
            if (!fs.existsSync(dir)) {
                missing.push(`–ö–∞—Ç–∞–ª–æ–≥: ${dir}`);
            }
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤
        for (const file of requiredFiles) {
            if (!fs.existsSync(file)) {
                missing.push(`–§–∞–π–ª: ${file}`);
            }
        }

        if (missing.length > 0) {
            return {
                success: false,
                error: `–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç: ${missing.join(', ')}`
            };
        }

        return {
            success: true,
            details: `–í—Å–µ ${requiredDirs.length} –∫–∞—Ç–∞–ª–æ–≥–æ–≤ –∏ ${requiredFiles.length} —Ñ–∞–π–ª–æ–≤ –Ω–∞–π–¥–µ–Ω—ã`
        };
    }

    async testTypeScriptCompilation() {
        return new Promise((resolve) => {
            this.log('   –ö–æ–º–ø–∏–ª—è—Ü–∏—è TypeScript...', 'yellow');
            
            const tsc = spawn('npx', ['tsc', '--noEmit'], {
                stdio: 'pipe',
                shell: true
            });

            let output = '';
            let errorOutput = '';

            tsc.stdout.on('data', (data) => {
                output += data.toString();
            });

            tsc.stderr.on('data', (data) => {
                errorOutput += data.toString();
            });

            tsc.on('close', (code) => {
                if (code === 0) {
                    resolve({
                        success: true,
                        details: 'TypeScript –∫–æ–º–ø–∏–ª—è—Ü–∏—è —É—Å–ø–µ—à–Ω–∞'
                    });
                } else {
                    resolve({
                        success: false,
                        error: `–û—à–∏–±–∫–∏ –∫–æ–º–ø–∏–ª—è—Ü–∏–∏: ${errorOutput || output}`
                    });
                }
            });

            tsc.on('error', (error) => {
                resolve({
                    success: false,
                    error: `–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ tsc: ${error.message}`
                });
            });
        });
    }

    async testConfigService() {
        try {
            // –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –∏–º–ø–æ—Ä—Ç —Å–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ JS
            const configPath = path.resolve('./dist/backend/services/config.js');
            
            if (!fs.existsSync(configPath)) {
                return {
                    success: false,
                    error: '–°–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–π config.js –Ω–µ –Ω–∞–π–¥–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –∫–æ–º–ø–∏–ª—è—Ü–∏—é.'
                };
            }

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π
            const appConfigExists = fs.existsSync('./configs/app.yaml');
            const serversConfigExists = fs.existsSync('./configs/servers.json');

            if (!appConfigExists || !serversConfigExists) {
                return {
                    success: false,
                    error: '–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã'
                };
            }

            return {
                success: true,
                details: '–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è —á—Ç–µ–Ω–∏—è'
            };

        } catch (error) {
            return {
                success: false,
                error: `–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Config Service: ${error.message}`
            };
        }
    }

    async testLoggerService() {
        try {
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ª–æ–≥-—Ñ–∞–π–ª–∞
            const logDir = './logs';
            if (!fs.existsSync(logDir)) {
                fs.mkdirSync(logDir, { recursive: true });
            }

            // –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ª–æ–≥-—Ñ–∞–π–ª–∞
            const testLogFile = path.join(logDir, 'test.log');
            const testMessage = `Test log entry - ${new Date().toISOString()}`;
            
            fs.writeFileSync(testLogFile, testMessage + '\n');
            
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø–∏—Å–∏
            const logContent = fs.readFileSync(testLogFile, 'utf8');
            
            if (logContent.includes(testMessage)) {
                // –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞
                fs.unlinkSync(testLogFile);
                
                return {
                    success: true,
                    details: '–ó–∞–ø–∏—Å—å –∏ —á—Ç–µ–Ω–∏–µ –ª–æ–≥–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ'
                };
            } else {
                return {
                    success: false,
                    error: '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å –≤ –ª–æ–≥-—Ñ–∞–π–ª'
                };
            }

        } catch (error) {
            return {
                success: false,
                error: `–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Logger Service: ${error.message}`
            };
        }
    }

    async testSSHKeys() {
        try {
            const sshKeyPath = './configs/ssh_keys/llm_server_key';
            const sshPubKeyPath = './configs/ssh_keys/llm_server_key.pub';
            const sshConfigPath = './configs/ssh_keys/config';

            const keyExists = fs.existsSync(sshKeyPath);
            const pubKeyExists = fs.existsSync(sshPubKeyPath);
            const configExists = fs.existsSync(sshConfigPath);

            if (!keyExists || !pubKeyExists) {
                return {
                    success: false,
                    error: 'SSH –∫–ª—é—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã'
                };
            }

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ –ø—Ä–∏–≤–∞—Ç–Ω–æ–º—É –∫–ª—é—á—É
            const keyStats = fs.statSync(sshKeyPath);
            
            return {
                success: true,
                details: `SSH –∫–ª—é—á–∏ –Ω–∞–π–¥–µ–Ω—ã. –†–∞–∑–º–µ—Ä –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞: ${keyStats.size} –±–∞–π—Ç`
            };

        } catch (error) {
            return {
                success: false,
                error: `–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ SSH –∫–ª—é—á–µ–π: ${error.message}`
            };
        }
    }

    async testPackageIntegrity() {
        try {
            const packageJson = JSON.parse(fs.readFileSync('./package.json', 'utf8'));
            
            const requiredDeps = [
                'react',
                'react-dom',
                'ssh2',
                'axios',
                'yaml'
            ];

            const requiredDevDeps = [
                'electron',
                'typescript',
                'electron-builder'
            ];

            let missingDeps = [];

            for (const dep of requiredDeps) {
                if (!packageJson.dependencies || !packageJson.dependencies[dep]) {
                    missingDeps.push(`dependency: ${dep}`);
                }
            }

            for (const dep of requiredDevDeps) {
                if (!packageJson.devDependencies || !packageJson.devDependencies[dep]) {
                    missingDeps.push(`devDependency: ${dep}`);
                }
            }

            if (missingDeps.length > 0) {
                return {
                    success: false,
                    error: `–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: ${missingDeps.join(', ')}`
                };
            }

            return {
                success: true,
                details: `–í—Å–µ ${requiredDeps.length + requiredDevDeps.length} –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –Ω–∞–π–¥–µ–Ω—ã`
            };

        } catch (error) {
            return {
                success: false,
                error: `–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ package.json: ${error.message}`
            };
        }
    }

    async testNodeModules() {
        try {
            const nodeModulesExists = fs.existsSync('./node_modules');
            
            if (!nodeModulesExists) {
                return {
                    success: false,
                    error: 'node_modules –Ω–µ –Ω–∞–π–¥–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ npm install'
                };
            }

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª—é—á–µ–≤—ã—Ö –º–æ–¥—É–ª–µ–π
            const keyModules = ['ssh2', 'axios', 'react', 'electron'];
            let missingModules = [];

            for (const module of keyModules) {
                if (!fs.existsSync(`./node_modules/${module}`)) {
                    missingModules.push(module);
                }
            }

            if (missingModules.length > 0) {
                return {
                    success: false,
                    error: `–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –º–æ–¥—É–ª–∏: ${missingModules.join(', ')}`
                };
            }

            return {
                success: true,
                details: `–í—Å–µ ${keyModules.length} –∫–ª—é—á–µ–≤—ã—Ö –º–æ–¥—É–ª–µ–π —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã`
            };

        } catch (error) {
            return {
                success: false,
                error: `–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ node_modules: ${error.message}`
            };
        }
    }

    async testBuildConfiguration() {
        try {
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ tsconfig.json
            const tsconfigExists = fs.existsSync('./tsconfig.json');
            if (!tsconfigExists) {
                return {
                    success: false,
                    error: 'tsconfig.json –Ω–µ –Ω–∞–π–¥–µ–Ω'
                };
            }

            const tsconfig = JSON.parse(fs.readFileSync('./tsconfig.json', 'utf8'));
            
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ webpack –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            const webpackConfigExists = fs.existsSync('./renderer/webpack.config.js');
            
            return {
                success: true,
                details: `–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–±–æ—Ä–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã. Target: ${tsconfig.compilerOptions?.target || '–Ω–µ —É–∫–∞–∑–∞–Ω'}`
            };

        } catch (error) {
            return {
                success: false,
                error: `–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π —Å–±–æ—Ä–∫–∏: ${error.message}`
            };
        }
    }

    generateReport() {
        const duration = Date.now() - this.startTime;
        const total = this.results.passed + this.results.failed + this.results.skipped;

        this.log('\n' + '='.repeat(60), 'bright');
        this.log('üìä –û–¢–ß–ï–¢ –û –ö–û–ú–ü–õ–ï–ö–°–ù–û–ú –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ò', 'bright');
        this.log('='.repeat(60), 'bright');

        this.log(`\nüìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:`, 'cyan');
        this.log(`   ‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: ${this.results.passed}`, 'green');
        this.log(`   ‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: ${this.results.failed}`, 'red');
        this.log(`   ‚è≠Ô∏è  –ü—Ä–æ–ø—É—â–µ–Ω–æ: ${this.results.skipped}`, 'yellow');
        this.log(`   üìä –í—Å–µ–≥–æ: ${total}`);
        this.log(`   ‚è±Ô∏è  –í—Ä–µ–º—è: ${duration}ms`);

        const successRate = total > 0 ? ((this.results.passed / total) * 100).toFixed(1) : 0;
        this.log(`   üìä –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: ${successRate}%`, successRate >= 80 ? 'green' : 'red');

        this.log(`\nüìã –î–µ—Ç–∞–ª–∏ —Ç–µ—Å—Ç–æ–≤:`, 'cyan');
        for (const test of this.results.tests) {
            const status = test.status === 'PASSED' ? '‚úÖ' : '‚ùå';
            const color = test.status === 'PASSED' ? 'green' : 'red';
            this.log(`   ${status} ${test.name}`, color);
            
            if (test.details) {
                this.log(`      üí° ${test.details}`, 'blue');
            }
            if (test.error) {
                this.log(`      üö® ${test.error}`, 'red');
            }
        }

        // –û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if (this.results.failed === 0) {
            this.log('\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!', 'green');
            this.log('‚úÖ –ü—Ä–æ–µ–∫—Ç –≥–æ—Ç–æ–≤ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —ç—Ç–∞–ø—É —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏', 'green');
        } else {
            this.log('\n‚ö†Ô∏è  –û–ë–ù–ê–†–£–ñ–ï–ù–´ –ü–†–û–ë–õ–ï–ú–´', 'red');
            this.log('üîß –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –æ—à–∏–±–∫–∏ –ø–µ—Ä–µ–¥ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ–º', 'yellow');
        }

        this.log('\n' + '='.repeat(60), 'bright');

        return {
            success: this.results.failed === 0,
            stats: this.results,
            duration,
            successRate: parseFloat(successRate)
        };
    }

    async run() {
        this.log('üöÄ –ó–ê–ü–£–°–ö –ö–û–ú–ü–õ–ï–ö–°–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø', 'bright');
        this.log('Windows LLM Agent - Backend Services', 'cyan');
        this.log('='.repeat(60), 'bright');

        // –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
        const tests = [
            ['–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞', () => this.testProjectStructure()],
            ['–¶–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å package.json', () => this.testPackageIntegrity()],
            ['–£—Å—Ç–∞–Ω–æ–≤–∫–∞ node_modules', () => this.testNodeModules()],
            ['–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–±–æ—Ä–∫–∏', () => this.testBuildConfiguration()],
            ['SSH –∫–ª—é—á–∏', () => this.testSSHKeys()],
            ['TypeScript –∫–æ–º–ø–∏–ª—è—Ü–∏—è', () => this.testTypeScriptCompilation()],
            ['Config Service', () => this.testConfigService()],
            ['Logger Service', () => this.testLoggerService()]
        ];

        // –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
        for (const [name, testFn] of tests) {
            await this.runTest(name, testFn);
        }

        // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞
        return this.generateReport();
    }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
async function main() {
    const tester = new ComprehensiveTest();
    
    try {
        const result = await tester.run();
        
        // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –≤ —Ñ–∞–π–ª
        const reportData = {
            timestamp: new Date().toISOString(),
            result: result,
            tests: tester.results.tests
        };
        
        fs.writeFileSync(
            './COMPREHENSIVE_TEST_REPORT.json',
            JSON.stringify(reportData, null, 2)
        );
        
        console.log('\nüìÑ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ COMPREHENSIVE_TEST_REPORT.json');
        
        // –ö–æ–¥ –≤—ã—Ö–æ–¥–∞
        process.exit(result.success ? 0 : 1);
        
    } catch (error) {
        console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error.message);
        process.exit(1);
    }
}

// –ó–∞–ø—É—Å–∫ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
    main();
}

module.exports = ComprehensiveTest;
