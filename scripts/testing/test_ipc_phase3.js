#!/usr/bin/env node

/**
 * STAGE 5 - –§–ê–ó–ê 3: IPC –ò–ù–¢–ï–ì–†–ê–¶–ò–û–ù–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï
 * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—é –º–µ–∂–¥—É frontend –∏ backend —á–µ—Ä–µ–∑ IPC
 */

const { spawn } = require('child_process');
const fs = require('fs');
const path = require('path');

class IPCTester {
    constructor() {
        this.results = {
            phase: '–§–ê–ó–ê 3: IPC –ò–ù–¢–ï–ì–†–ê–¶–ò–û–ù–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï',
            startTime: new Date().toISOString(),
            tests: [],
            summary: {
                total: 0,
                passed: 0,
                failed: 0,
                warnings: 0
            }
        };
        this.appProcess = null;
    }

    log(message, level = 'INFO') {
        const timestamp = new Date().toISOString();
        const logMessage = `[${timestamp}] [${level}] ${message}`;
        console.log(logMessage);
        
        if (!this.results.logs) this.results.logs = [];
        this.results.logs.push(logMessage);
    }

    addTest(name, status, details = '', duration = 0) {
        const test = {
            name,
            status, // 'PASS', 'FAIL', 'WARN'
            details,
            duration,
            timestamp: new Date().toISOString()
        };
        
        this.results.tests.push(test);
        this.results.summary.total++;
        
        if (status === 'PASS') this.results.summary.passed++;
        else if (status === 'FAIL') this.results.summary.failed++;
        else if (status === 'WARN') this.results.summary.warnings++;
        
        this.log(`${status}: ${name} ${details ? '- ' + details : ''}`, status);
    }

    async sleep(ms) {
        return new Promise(resolve => setTimeout(resolve, ms));
    }

    async startApplication() {
        this.log('üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è IPC —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è...');
        
        return new Promise((resolve, reject) => {
            this.appProcess = spawn('npm', ['run', 'start'], { 
                shell: true,
                stdio: ['pipe', 'pipe', 'pipe']
            });
            
            let stdout = '';
            let stderr = '';
            let isReady = false;
            
            this.appProcess.stdout.on('data', (data) => {
                stdout += data.toString();
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
                if (data.toString().includes('Preload script loaded successfully') && !isReady) {
                    isReady = true;
                    this.addTest('–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ –∏ –≥–æ—Ç–æ–≤–æ –∫ IPC —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é', 'PASS');
                    resolve({ stdout, stderr });
                }
            });
            
            this.appProcess.stderr.on('data', (data) => {
                stderr += data.toString();
            });
            
            this.appProcess.on('error', (error) => {
                reject(error);
            });
            
            // –¢–∞–π–º–∞—É—Ç –Ω–∞ –∑–∞–ø—É—Å–∫
            setTimeout(() => {
                if (!isReady) {
                    this.addTest('–¢–∞–π–º–∞—É—Ç –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è', 'FAIL', '–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª–æ—Å—å –∑–∞ 30 —Å–µ–∫—É–Ω–¥');
                    resolve({ stdout, stderr, timeout: true });
                }
            }, 30000);
        });
    }

    async stopApplication() {
        if (this.appProcess) {
            this.log('üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...');
            this.appProcess.kill('SIGTERM');
            await this.sleep(2000);
            this.addTest('–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ', 'PASS');
        }
    }

    async testIPCMethods() {
        this.log('üîó –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ IPC –º–µ—Ç–æ–¥–æ–≤...');
        
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ IPC –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –≤ main.ts
            const mainTsPath = 'backend/main.ts';
            if (fs.existsSync(mainTsPath)) {
                const mainContent = fs.readFileSync(mainTsPath, 'utf8');
                
                // –°–ø–∏—Å–æ–∫ –æ–∂–∏–¥–∞–µ–º—ã—Ö IPC –º–µ—Ç–æ–¥–æ–≤
                const expectedIPCMethods = [
                    'get-servers',
                    'update-server', 
                    'test-connection',
                    'deploy-server',
                    'connect-server',
                    'disconnect-server',
                    'send-message',
                    'get-logs'
                ];
                
                for (const method of expectedIPCMethods) {
                    if (mainContent.includes(`'${method}'`) || mainContent.includes(`"${method}"`)) {
                        this.addTest(`IPC –º–µ—Ç–æ–¥ ${method} –æ–ø—Ä–µ–¥–µ–ª–µ–Ω`, 'PASS');
                    } else {
                        this.addTest(`IPC –º–µ—Ç–æ–¥ ${method} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç`, 'FAIL');
                    }
                }
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ ipcMain
                if (mainContent.includes('ipcMain.handle') || mainContent.includes('ipcMain.on')) {
                    this.addTest('ipcMain –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã', 'PASS');
                } else {
                    this.addTest('ipcMain –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã', 'FAIL');
                }
                
            } else {
                this.addTest('–§–∞–π–ª main.ts –Ω–µ –Ω–∞–π–¥–µ–Ω', 'FAIL');
            }
            
        } catch (error) {
            this.addTest('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ IPC –º–µ—Ç–æ–¥–æ–≤', 'FAIL', error.message);
        }
    }

    async testPreloadScript() {
        this.log('üìú –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ preload —Å–∫—Ä–∏–ø—Ç–∞...');
        
        try {
            const preloadPath = 'backend/preload.js';
            if (fs.existsSync(preloadPath)) {
                const preloadContent = fs.readFileSync(preloadPath, 'utf8');
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —ç–∫—Å–ø–æ—Ä—Ç electronAPI
                if (preloadContent.includes('electronAPI')) {
                    this.addTest('electronAPI —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è', 'PASS');
                } else {
                    this.addTest('electronAPI –Ω–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è', 'FAIL');
                }
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç–æ–¥—ã contextBridge
                if (preloadContent.includes('contextBridge.exposeInMainWorld')) {
                    this.addTest('contextBridge –Ω–∞—Å—Ç—Ä–æ–µ–Ω', 'PASS');
                } else {
                    this.addTest('contextBridge –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω', 'FAIL');
                }
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç–æ–¥—ã IPC
                const ipcMethods = ['invoke', 'on', 'once', 'removeListener'];
                for (const method of ipcMethods) {
                    if (preloadContent.includes(method)) {
                        this.addTest(`IPC –º–µ—Ç–æ–¥ ${method} –¥–æ—Å—Ç—É–ø–µ–Ω`, 'PASS');
                    } else {
                        this.addTest(`IPC –º–µ—Ç–æ–¥ ${method} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç`, 'WARN');
                    }
                }
                
            } else {
                this.addTest('–§–∞–π–ª preload.js –Ω–µ –Ω–∞–π–¥–µ–Ω', 'FAIL');
            }
            
        } catch (error) {
            this.addTest('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ preload —Å–∫—Ä–∏–ø—Ç–∞', 'FAIL', error.message);
        }
    }

    async testReactHooks() {
        this.log('‚öõÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ React —Ö—É–∫–æ–≤ –¥–ª—è IPC...');
        
        try {
            const useIpcPath = 'renderer/src/hooks/useIpc.ts';
            if (fs.existsSync(useIpcPath)) {
                const useIpcContent = fs.readFileSync(useIpcPath, 'utf8');
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ö—É–∫–∏
                const expectedHooks = [
                    'useServerManager',
                    'useLlmChat',
                    'useLogger'
                ];
                
                for (const hook of expectedHooks) {
                    if (useIpcContent.includes(hook)) {
                        this.addTest(`React —Ö—É–∫ ${hook} –æ–ø—Ä–µ–¥–µ–ª–µ–Ω`, 'PASS');
                    } else {
                        this.addTest(`React —Ö—É–∫ ${hook} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç`, 'FAIL');
                    }
                }
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ window.electronAPI
                if (useIpcContent.includes('window.electronAPI')) {
                    this.addTest('window.electronAPI –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è', 'PASS');
                } else {
                    this.addTest('window.electronAPI –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è', 'FAIL');
                }
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º TypeScript —Ç–∏–ø—ã
                if (useIpcContent.includes('interface') || useIpcContent.includes('type')) {
                    this.addTest('TypeScript —Ç–∏–ø—ã –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã', 'PASS');
                } else {
                    this.addTest('TypeScript —Ç–∏–ø—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç', 'WARN');
                }
                
            } else {
                this.addTest('–§–∞–π–ª useIpc.ts –Ω–µ –Ω–∞–π–¥–µ–Ω', 'FAIL');
            }
            
        } catch (error) {
            this.addTest('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ React —Ö—É–∫–æ–≤', 'FAIL', error.message);
        }
    }

    async testServerManagerIntegration() {
        this.log('üñ•Ô∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ ServerManager...');
        
        try {
            const serverManagerPath = 'backend/services/serverManager.ts';
            if (fs.existsSync(serverManagerPath)) {
                const serverManagerContent = fs.readFileSync(serverManagerPath, 'utf8');
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç–æ–¥—ã
                const expectedMethods = [
                    'getServers',
                    'updateServer',
                    'testConnection',
                    'deployServer',
                    'connectServer',
                    'disconnectServer'
                ];
                
                for (const method of expectedMethods) {
                    if (serverManagerContent.includes(method)) {
                        this.addTest(`ServerManager –º–µ—Ç–æ–¥ ${method}`, 'PASS');
                    } else {
                        this.addTest(`ServerManager –º–µ—Ç–æ–¥ ${method} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç`, 'FAIL');
                    }
                }
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ EventEmitter –∏–ª–∏ —Å–æ–±—ã—Ç–∏–π
                if (serverManagerContent.includes('EventEmitter') || serverManagerContent.includes('emit')) {
                    this.addTest('–°–∏—Å—Ç–µ–º–∞ —Å–æ–±—ã—Ç–∏–π ServerManager', 'PASS');
                } else {
                    this.addTest('–°–∏—Å—Ç–µ–º–∞ —Å–æ–±—ã—Ç–∏–π ServerManager –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç', 'WARN');
                }
                
            } else {
                this.addTest('–§–∞–π–ª serverManager.ts –Ω–µ –Ω–∞–π–¥–µ–Ω', 'FAIL');
            }
            
        } catch (error) {
            this.addTest('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ ServerManager', 'FAIL', error.message);
        }
    }

    async testUIComponents() {
        this.log('üé® –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ UI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å IPC...');
        
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º ServersPanel
            const serversPanelPath = 'renderer/src/components/ServersPanel.tsx';
            if (fs.existsSync(serversPanelPath)) {
                const serversPanelContent = fs.readFileSync(serversPanelPath, 'utf8');
                
                if (serversPanelContent.includes('useServerManager')) {
                    this.addTest('ServersPanel –∏—Å–ø–æ–ª—å–∑—É–µ—Ç useServerManager', 'PASS');
                } else {
                    this.addTest('ServersPanel –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç useServerManager', 'FAIL');
                }
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
                const buttons = ['Test', 'Deploy', 'Connect'];
                for (const button of buttons) {
                    if (serversPanelContent.includes(button)) {
                        this.addTest(`ServersPanel –∫–Ω–æ–ø–∫–∞ ${button}`, 'PASS');
                    } else {
                        this.addTest(`ServersPanel –∫–Ω–æ–ø–∫–∞ ${button} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç`, 'WARN');
                    }
                }
            } else {
                this.addTest('–§–∞–π–ª ServersPanel.tsx –Ω–µ –Ω–∞–π–¥–µ–Ω', 'FAIL');
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º Chat –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
            const chatPath = 'renderer/src/components/Chat.tsx';
            if (fs.existsSync(chatPath)) {
                const chatContent = fs.readFileSync(chatPath, 'utf8');
                
                if (chatContent.includes('useLlmChat')) {
                    this.addTest('Chat –∏—Å–ø–æ–ª—å–∑—É–µ—Ç useLlmChat', 'PASS');
                } else {
                    this.addTest('Chat –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç useLlmChat', 'FAIL');
                }
                
                if (chatContent.includes('sendMessage')) {
                    this.addTest('Chat –∏–º–µ–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π', 'PASS');
                } else {
                    this.addTest('Chat –Ω–µ –∏–º–µ–µ—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π', 'FAIL');
                }
            } else {
                this.addTest('–§–∞–π–ª Chat.tsx –Ω–µ –Ω–∞–π–¥–µ–Ω', 'FAIL');
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º LogViewer
            const logViewerPath = 'renderer/src/components/LogViewer.tsx';
            if (fs.existsSync(logViewerPath)) {
                const logViewerContent = fs.readFileSync(logViewerPath, 'utf8');
                
                if (logViewerContent.includes('useLogger')) {
                    this.addTest('LogViewer –∏—Å–ø–æ–ª—å–∑—É–µ—Ç useLogger', 'PASS');
                } else {
                    this.addTest('LogViewer –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç useLogger', 'FAIL');
                }
            } else {
                this.addTest('–§–∞–π–ª LogViewer.tsx –Ω–µ –Ω–∞–π–¥–µ–Ω', 'FAIL');
            }
            
        } catch (error) {
            this.addTest('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ UI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤', 'FAIL', error.message);
        }
    }

    async testConfigurationIntegration() {
        this.log('‚öôÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π...');
        
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º config service
            const configPath = 'backend/services/config.ts';
            if (fs.existsSync(configPath)) {
                const configContent = fs.readFileSync(configPath, 'utf8');
                
                if (configContent.includes('getAppConfig') || configContent.includes('getServers')) {
                    this.addTest('Config service –º–µ—Ç–æ–¥—ã –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã', 'PASS');
                } else {
                    this.addTest('Config service –º–µ—Ç–æ–¥—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç', 'FAIL');
                }
                
                if (configContent.includes('yaml') || configContent.includes('JSON')) {
                    this.addTest('Config service –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ñ–æ—Ä–º–∞—Ç—ã —Ñ–∞–π–ª–æ–≤', 'PASS');
                } else {
                    this.addTest('Config service –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ñ–æ—Ä–º–∞—Ç—ã —Ñ–∞–π–ª–æ–≤', 'WARN');
                }
            } else {
                this.addTest('–§–∞–π–ª config.ts –Ω–µ –Ω–∞–π–¥–µ–Ω', 'FAIL');
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
            if (fs.existsSync('configs/servers.json')) {
                try {
                    const serversConfig = JSON.parse(fs.readFileSync('configs/servers.json', 'utf8'));
                    if (serversConfig.servers && serversConfig.servers.length > 0) {
                        this.addTest('–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–µ—Ä–≤–µ—Ä–æ–≤ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è', 'PASS', 
                            `–ù–∞–π–¥–µ–Ω–æ ${serversConfig.servers.length} —Å–µ—Ä–≤–µ—Ä–æ–≤`);
                    } else {
                        this.addTest('–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–µ—Ä–≤–µ—Ä–æ–≤ –ø—É—Å—Ç–∞', 'WARN');
                    }
                } catch (error) {
                    this.addTest('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ servers.json', 'FAIL', error.message);
                }
            } else {
                this.addTest('–§–∞–π–ª servers.json –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç', 'FAIL');
            }
            
        } catch (error) {
            this.addTest('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π', 'FAIL', error.message);
        }
    }

    generateReport() {
        this.results.endTime = new Date().toISOString();
        this.results.duration = new Date(this.results.endTime) - new Date(this.results.startTime);
        
        const report = `# STAGE 5 - –§–ê–ó–ê 3: –û–¢–ß–ï–¢ IPC –ò–ù–¢–ï–ì–†–ê–¶–ò–û–ù–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø

## üìä –°–í–û–î–ö–ê –†–ï–ó–£–õ–¨–¢–ê–¢–û–í

**–ü–µ—Ä–∏–æ–¥ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:** ${this.results.startTime} - ${this.results.endTime}  
**–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:** ${Math.round(this.results.duration / 1000)} —Å–µ–∫—É–Ω–¥

### –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–µ—Å—Ç–æ–≤:
- **–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤:** ${this.results.summary.total}
- **‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ:** ${this.results.summary.passed}
- **‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ:** ${this.results.summary.failed}
- **‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è:** ${this.results.summary.warnings}

**–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞:** ${Math.round((this.results.summary.passed / this.results.summary.total) * 100)}%

## üìã –î–ï–¢–ê–õ–¨–ù–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´

${this.results.tests.map(test => {
    const icon = test.status === 'PASS' ? '‚úÖ' : test.status === 'FAIL' ? '‚ùå' : '‚ö†Ô∏è';
    return `### ${icon} ${test.name}
**–°—Ç–∞—Ç—É—Å:** ${test.status}  
**–î–µ—Ç–∞–ª–∏:** ${test.details || '–ù–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏'}  
**–í—Ä–µ–º—è:** ${test.timestamp}
`;
}).join('\n')}

## üéØ –í–´–í–û–î–´

### –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã (—Ç—Ä–µ–±—É—é—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è):
${this.results.tests.filter(t => t.status === 'FAIL').map(t => `- ‚ùå ${t.name}: ${t.details}`).join('\n') || '–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–æ'}

### –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–∏—Ç—å):
${this.results.tests.filter(t => t.status === 'WARN').map(t => `- ‚ö†Ô∏è ${t.name}: ${t.details}`).join('\n') || '–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π –Ω–µ—Ç'}

### –£—Å–ø–µ—à–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏:
${this.results.tests.filter(t => t.status === 'PASS').length} –∏–∑ ${this.results.summary.total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ

## üöÄ –ì–û–¢–û–í–ù–û–°–¢–¨ –ö –§–ê–ó–ï 4

${this.results.summary.failed === 0 ? 
    '‚úÖ **–ì–û–¢–û–í –ö –§–ê–ó–ï 4** - –í—Å–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã' : 
    this.results.summary.failed <= 3 ?
    '‚ö†Ô∏è **–£–°–õ–û–í–ù–û –ì–û–¢–û–í –ö –§–ê–ó–ï 4** - –ï—Å—Ç—å –º–∏–Ω–æ—Ä–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã, –Ω–æ –º–æ–∂–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å' :
    '‚ùå **–ù–ï –ì–û–¢–û–í –ö –§–ê–ó–ï 4** - –ï—Å—Ç—å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏, —Ç—Ä–µ–±—É—é—â–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è'}

## üìà –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò

### IPC –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞:
- –£–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –≤—Å–µ IPC –º–µ—Ç–æ–¥—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã
- –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–∏–ø–∏–∑–∞—Ü–∏—é TypeScript –¥–ª—è IPC –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏
- –î–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫ –≤ IPC –≤—ã–∑–æ–≤–∞—Ö

### UI –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è:
- –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ IPC –≤—ã–∑–æ–≤—ã –∏–∑ UI
- –î–æ–±–∞–≤–∏—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –∑–∞–≥—Ä—É–∑–∫–∏ –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
- –£–ª—É—á—à–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫ –≤ UI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞—Ö

### –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:
1. –ü–µ—Ä–µ–π—Ç–∏ –∫ –§–∞–∑–µ 4 (—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ) –µ—Å–ª–∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å > 80%
2. –ò—Å–ø—Ä–∞–≤–∏—Ç—å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ IPC –ø—Ä–æ–±–ª–µ–º—ã –µ—Å–ª–∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å < 80%
3. –ü—Ä–æ–≤–µ—Å—Ç–∏ —Ä–µ–∞–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å —Å–µ—Ä–≤–µ—Ä–æ–º

---

**–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ:** ${new Date().toISOString()}  
**–í–µ—Ä—Å–∏—è —Ç–µ—Å—Ç–µ—Ä–∞:** 1.0.0
`;

        return report;
    }

    async run() {
        this.log('üéØ –ù–∞—á–∞–ª–æ –§–ê–ó–´ 3: IPC –ò–ù–¢–ï–ì–†–ê–¶–ò–û–ù–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï');
        
        try {
            // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
            await this.testIPCMethods();
            await this.testPreloadScript();
            await this.testReactHooks();
            await this.testServerManagerIntegration();
            await this.testUIComponents();
            await this.testConfigurationIntegration();
            
            // –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            await this.startApplication();
            
            // –î–∞–µ–º –≤—Ä–µ–º—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–≥—Ä—É–∑–∏—Ç—å—Å—è
            await this.sleep(5000);
            
            // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
            await this.stopApplication();
            
        } catch (error) {
            this.addTest('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è', 'FAIL', error.message);
        }
        
        const report = this.generateReport();
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
        fs.writeFileSync('STAGE5_PHASE3_REPORT.md', report);
        this.log('üìÑ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ STAGE5_PHASE3_REPORT.md');
        
        // –í—ã–≤–æ–¥–∏–º –∫—Ä–∞—Ç–∫—É—é —Å–≤–æ–¥–∫—É
        console.log('\n' + '='.repeat(60));
        console.log('üìä –ö–†–ê–¢–ö–ê–Ø –°–í–û–î–ö–ê –§–ê–ó–´ 3');
        console.log('='.repeat(60));
        console.log(`‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: ${this.results.summary.passed}`);
        console.log(`‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: ${this.results.summary.failed}`);
        console.log(`‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è: ${this.results.summary.warnings}`);
        console.log(`üìà –£—Å–ø–µ—Ö: ${Math.round((this.results.summary.passed / this.results.summary.total) * 100)}%`);
        
        const successRate = (this.results.summary.passed / this.results.summary.total) * 100;
        
        if (successRate >= 90) {
            console.log('\nüéâ –§–ê–ó–ê 3 –ó–ê–í–ï–†–®–ï–ù–ê –û–¢–õ–ò–ß–ù–û! –ì–æ—Ç–æ–≤ –∫ –ø–µ—Ä–µ—Ö–æ–¥—É –∫ –§–∞–∑–µ 4.');
        } else if (successRate >= 80) {
            console.log('\n‚úÖ –§–ê–ó–ê 3 –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û! –ì–æ—Ç–æ–≤ –∫ –ø–µ—Ä–µ—Ö–æ–¥—É –∫ –§–∞–∑–µ 4.');
        } else if (successRate >= 70) {
            console.log('\n‚ö†Ô∏è –§–ê–ó–ê 3 –ó–ê–í–ï–†–®–ï–ù–ê –° –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–Ø–ú–ò. –ú–æ–∂–Ω–æ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç—å –∫ –§–∞–∑–µ 4, –Ω–æ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—ã.');
        } else {
            console.log('\n‚ùå –§–ê–ó–ê 3 –ó–ê–í–ï–†–®–ï–ù–ê –° –û–®–ò–ë–ö–ê–ú–ò. –¢—Ä–µ–±—É–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –§–∞–∑–æ–π 4.');
        }
        
        return successRate >= 70;
    }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
if (require.main === module) {
    const tester = new IPCTester();
    tester.run().then(success => {
        process.exit(success ? 0 : 1);
    }).catch(error => {
        console.error('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–µ—Ä–∞:', error);
        process.exit(1);
    });
}

module.exports = IPCTester;
