#!/usr/bin/env node
/**
 * –£–ø—Ä–æ—â–µ–Ω–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ TaskExecutor —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º ts-node
 */

const path = require('path');
const fs = require('fs');

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ ts-node
require('ts-node').register({
  project: path.join(__dirname, 'tsconfig.json'),
  compilerOptions: {
    module: 'commonjs',
    target: 'ES2020',
    esModuleInterop: true,
    skipLibCheck: true
  }
});

// –°–∏–º—É–ª—è—Ü–∏—è Logger
class MockLogger {
  info(message) {
    console.log(`[INFO] ${message}`);
  }
  
  warn(message) {
    console.log(`[WARN] ${message}`);
  }
  
  error(message, error) {
    console.log(`[ERROR] ${message}`, error || '');
  }
}

async function testTaskExecutorBasic() {
  console.log('üß™ –ë–∞–∑–æ–≤–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ TaskExecutor...');
  
  try {
    // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º TaskExecutor
    const { TaskExecutor } = require('./backend/services/taskExecutor');
    
    const logger = new MockLogger();
    const executor = new TaskExecutor(logger, 2);
    
    console.log('‚úÖ TaskExecutor —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ');
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã–µ –º–µ—Ç–æ–¥—ã
    const stats = executor.getStats();
    console.log('üìä –ù–∞—á–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:', stats);
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏—è
    executor.on('task-started', (data) => {
      console.log(`üöÄ –°–æ–±—ã—Ç–∏–µ: –∑–∞–¥–∞—á–∞ –∑–∞–ø—É—â–µ–Ω–∞ ${data.taskId}`);
    });
    
    executor.on('task-progress', (data) => {
      console.log(`üìä –°–æ–±—ã—Ç–∏–µ: –ø—Ä–æ–≥—Ä–µ—Å—Å ${data.progress}%`);
    });
    
    executor.on('task-completed', (data) => {
      console.log(`‚úÖ –°–æ–±—ã—Ç–∏–µ: –∑–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ ${data.taskId}`);
    });
    
    executor.on('task-failed', (data) => {
      console.log(`‚ùå –°–æ–±—ã—Ç–∏–µ: –∑–∞–¥–∞—á–∞ –ø—Ä–æ–≤–∞–ª–µ–Ω–∞ ${data.taskId}`);
    });
    
    console.log('‚úÖ –°–æ–±—ã—Ç–∏—è –ø–æ–¥–ø–∏—Å–∞–Ω—ã');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç–æ–¥—ã —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á
    console.log('üîß –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ—Ç–æ–¥–æ–≤ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á...');
    
    const deployConfig = {
      serverId: 'test-server',
      host: '213.181.108.221',
      port: 39166,
      username: 'root',
      privateKey: '/path/to/key',
      deployPath: '/tmp/test',
      llmPort: 8080
    };
    
    const connectConfig = {
      serverId: 'test-server',
      host: '213.181.108.221',
      port: 39166,
      username: 'root',
      privateKey: '/path/to/key',
      llmPort: 8080,
      localPort: 8081
    };
    
    const chatConfig = {
      serverId: 'test-server',
      baseUrl: 'http://localhost:8081',
      messages: [{ role: 'user', content: 'test' }]
    };
    
    console.log('‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∑–∞–¥–∞—á —Å–æ–∑–¥–∞–Ω—ã');
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á (–±–µ–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è)
    try {
      // –≠—Ç–∏ –≤—ã–∑–æ–≤—ã –¥–æ–ª–∂–Ω—ã –ø—Ä–æ–≤–∞–ª–∏—Ç—å—Å—è –∏–∑-–∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è JS —Ñ–∞–π–ª–æ–≤, –Ω–æ —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ
      console.log('‚ö†Ô∏è  –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∑–∞–¥–∞—á (–æ–∂–∏–¥–∞—é—Ç—Å—è –æ—à–∏–±–∫–∏ –∏–∑-–∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è JS —Ñ–∞–π–ª–æ–≤)...');
      
      const deployPromise = executor.runDeployTask(deployConfig).catch(e => {
        console.log('   Deploy task –æ—à–∏–±–∫–∞ (–æ–∂–∏–¥–∞–µ–º–æ):', e.message.substring(0, 50) + '...');
        return { success: false, error: e.message };
      });
      
      const connectPromise = executor.runConnectTask(connectConfig).catch(e => {
        console.log('   Connect task –æ—à–∏–±–∫–∞ (–æ–∂–∏–¥–∞–µ–º–æ):', e.message.substring(0, 50) + '...');
        return { success: false, error: e.message };
      });
      
      const chatPromise = executor.runChatTask(chatConfig).catch(e => {
        console.log('   Chat task –æ—à–∏–±–∫–∞ (–æ–∂–∏–¥–∞–µ–º–æ):', e.message.substring(0, 50) + '...');
        return { success: false, error: e.message };
      });
      
      await Promise.all([deployPromise, connectPromise, chatPromise]);
      
    } catch (error) {
      console.log('‚ö†Ô∏è  –û—à–∏–±–∫–∏ –∑–∞–¥–∞—á –æ–∂–∏–¥–∞–µ–º—ã (–Ω–µ—Ç JS —Ñ–∞–π–ª–æ–≤)');
    }
    
    // –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    const finalStats = executor.getStats();
    console.log('üìä –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:', finalStats);
    
    // Shutdown
    await executor.shutdown();
    console.log('üèÅ TaskExecutor –∑–∞–≤–µ—Ä—à–µ–Ω');
    
    return true;
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error.message);
    console.error('Stack:', error.stack);
    return false;
  }
}

async function main() {
  console.log('üöÄ –£–ø—Ä–æ—â–µ–Ω–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ TaskExecutor');
  console.log('=' * 50);
  
  try {
    const success = await testTaskExecutorBasic();
    
    console.log('\n' + '=' * 50);
    if (success) {
      console.log('‚úÖ –ë–∞–∑–æ–≤–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ TaskExecutor –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ!');
      console.log('üéØ TaskExecutor –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è –∏ –∏–º–µ–µ—Ç –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–µ—Ç–æ–¥—ã');
      console.log('üìù –°–ª–µ–¥—É—é—â–∏–π —à–∞–≥: –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å ServerManager');
    } else {
      console.log('‚ùå –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–≤–∞–ª–∏–ª–æ—Å—å');
    }
    
    process.exit(success ? 0 : 1);
    
  } catch (error) {
    console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫
if (require.main === module) {
  main();
}
