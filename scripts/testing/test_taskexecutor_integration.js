#!/usr/bin/env node
/**
 * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ TaskExecutor —Å Tasks
 */

const path = require('path');
const fs = require('fs');

// –°–∏–º—É–ª—è—Ü–∏—è Logger –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
class MockLogger {
  info(message) {
    console.log(`[INFO] ${message}`);
  }
  
  warn(message) {
    console.log(`[WARN] ${message}`);
  }
  
  error(message, error) {
    console.log(`[ERROR] ${message}`, error || '');
  }
}

// –ö–æ–º–ø–∏–ª—è—Ü–∏—è TypeScript –≤ JavaScript –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
async function compileTasksForTesting() {
  console.log('üîß –ö–æ–º–ø–∏–ª—è—Ü–∏—è Tasks –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è...');
  
  const { execSync } = require('child_process');
  
  try {
    // –ö–æ–º–ø–∏–ª–∏—Ä—É–µ–º TypeScript —Ñ–∞–π–ª—ã
    execSync('npx tsc tasks/*.ts --outDir tasks --target ES2020 --module commonjs --esModuleInterop --skipLibCheck', {
      cwd: __dirname,
      stdio: 'inherit'
    });
    
    console.log('‚úÖ Tasks —Å–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ');
    return true;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∫–æ–º–ø–∏–ª—è—Ü–∏–∏ Tasks:', error.message);
    return false;
  }
}

// –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö JS —Ñ–∞–π–ª–æ–≤ Tasks (—É–ø—Ä–æ—â–µ–Ω–Ω—ã–µ –≤–µ—Ä—Å–∏–∏)
async function createTestTasks() {
  console.log('üìù –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö JS —Ñ–∞–π–ª–æ–≤ Tasks...');
  
  const tasksDir = path.join(__dirname, 'tasks');
  
  // deployTask.js
  const deployTaskJS = `
const { parentPort, workerData } = require('worker_threads');

function sendMessage(type, data) {
  if (parentPort) {
    parentPort.postMessage({
      type,
      timestamp: new Date().toISOString(),
      ...data
    });
  }
}

async function deployTask() {
  const { taskId, args } = workerData;
  
  try {
    sendMessage('log', { level: 'info', message: '–ù–∞—á–∞–ª–æ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è LLM —Å–µ—Ä–≤–µ—Ä–∞' });
    
    // –°–∏–º—É–ª—è—Ü–∏—è —ç—Ç–∞–ø–æ–≤ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è
    const steps = [
      '–ü—Ä–æ–≤–µ—Ä–∫–∞ SSH –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è',
      '–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π', 
      '–°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è',
      '–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è',
      '–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π',
      '–ó–∞–ø—É—Å–∫ LLM —Å–µ—Ä–≤–µ—Ä–∞',
      '–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–µ—Ä–∞'
    ];
    
    for (let i = 0; i < steps.length; i++) {
      const progress = Math.round(((i + 1) / steps.length) * 100);
      sendMessage('progress', { progress, message: steps[i] });
      sendMessage('log', { level: 'info', message: \`–≠—Ç–∞–ø \${i + 1}/\${steps.length}: \${steps[i]}\` });
      
      // –°–∏–º—É–ª—è—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
      await new Promise(resolve => setTimeout(resolve, 200 + Math.random() * 300));
    }
    
    sendMessage('complete', {
      data: {
        serverId: args.serverId,
        deployed: true,
        llmPort: args.llmPort,
        deployPath: args.deployPath
      }
    });
    
  } catch (error) {
    sendMessage('error', { error: error.message });
  }
}

deployTask();
`;

  // connectTask.js
  const connectTaskJS = `
const { parentPort, workerData } = require('worker_threads');

function sendMessage(type, data) {
  if (parentPort) {
    parentPort.postMessage({
      type,
      timestamp: new Date().toISOString(),
      ...data
    });
  }
}

async function connectTask() {
  const { taskId, args } = workerData;
  
  try {
    sendMessage('log', { level: 'info', message: '–ù–∞—á–∞–ª–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ LLM —Å–µ—Ä–≤–µ—Ä—É' });
    
    // –°–∏–º—É–ª—è—Ü–∏—è —ç—Ç–∞–ø–æ–≤ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    const steps = [
      '–ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –ø–æ—Ä—Ç–∞',
      '–°–æ–∑–¥–∞–Ω–∏–µ SSH —Ç—É–Ω–Ω–µ–ª—è',
      '–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è LLM',
      '–ü—Ä–æ–≤–µ—Ä–∫–∞ API —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤'
    ];
    
    for (let i = 0; i < steps.length; i++) {
      const progress = Math.round(((i + 1) / steps.length) * 100);
      sendMessage('progress', { progress, message: steps[i] });
      sendMessage('log', { level: 'info', message: \`–≠—Ç–∞–ø \${i + 1}/\${steps.length}: \${steps[i]}\` });
      
      await new Promise(resolve => setTimeout(resolve, 150 + Math.random() * 200));
    }
    
    sendMessage('complete', {
      data: {
        serverId: args.serverId,
        connected: true,
        localPort: args.localPort,
        tunnelActive: true
      }
    });
    
  } catch (error) {
    sendMessage('error', { error: error.message });
  }
}

connectTask();
`;

  // chatTask.js
  const chatTaskJS = `
const { parentPort, workerData } = require('worker_threads');

function sendMessage(type, data) {
  if (parentPort) {
    parentPort.postMessage({
      type,
      timestamp: new Date().toISOString(),
      ...data
    });
  }
}

async function chatTask() {
  const { taskId, args } = workerData;
  
  try {
    sendMessage('log', { level: 'info', message: '–ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —á–∞—Ç –∑–∞–ø—Ä–æ—Å–∞' });
    
    const messages = args.messages || [];
    sendMessage('progress', { progress: 25, message: '–í–∞–ª–∏–¥–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π' });
    
    await new Promise(resolve => setTimeout(resolve, 100));
    
    sendMessage('progress', { progress: 50, message: '–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ LLM' });
    
    // –°–∏–º—É–ª—è—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    for (let i = 0; i < messages.length; i++) {
      sendMessage('log', { 
        level: 'info', 
        message: \`–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è \${i + 1}: \${messages[i].content.substring(0, 50)}...\`
      });
      await new Promise(resolve => setTimeout(resolve, 50));
    }
    
    sendMessage('progress', { progress: 75, message: '–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞' });
    await new Promise(resolve => setTimeout(resolve, 200));
    
    sendMessage('progress', { progress: 100, message: '–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞' });
    
    sendMessage('complete', {
      data: {
        serverId: args.serverId,
        response: {
          role: 'assistant',
          content: '–¢–µ—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç –æ—Ç LLM —Å–µ—Ä–≤–µ—Ä–∞. –ó–∞–ø—Ä–æ—Å –æ–±—Ä–∞–±–æ—Ç–∞–Ω —É—Å–ø–µ—à–Ω–æ!'
        },
        usage: {
          promptTokens: 50,
          completionTokens: 25,
          totalTokens: 75
        }
      }
    });
    
  } catch (error) {
    sendMessage('error', { error: error.message });
  }
}

chatTask();
`;

  // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ñ–∞–π–ª—ã
  fs.writeFileSync(path.join(tasksDir, 'deployTask.js'), deployTaskJS);
  fs.writeFileSync(path.join(tasksDir, 'connectTask.js'), connectTaskJS);
  fs.writeFileSync(path.join(tasksDir, 'chatTask.js'), chatTaskJS);
  
  console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ JS —Ñ–∞–π–ª—ã Tasks —Å–æ–∑–¥–∞–Ω—ã');
}

// –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ TaskExecutor
async function testTaskExecutor() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ TaskExecutor –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏...');
  
  // –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –∏–º–ø–æ—Ä—Ç TaskExecutor (–ø–æ—Å–∫–æ–ª—å–∫—É —ç—Ç–æ TypeScript)
  let TaskExecutor;
  try {
    // –ü—ã—Ç–∞–µ–º—Å—è –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é
    const taskExecutorPath = path.join(__dirname, 'backend', 'services', 'taskExecutor.js');
    if (fs.existsSync(taskExecutorPath)) {
      TaskExecutor = require(taskExecutorPath).TaskExecutor;
    } else {
      console.log('‚ö†Ô∏è  –°–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–π TaskExecutor –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º ts-node');
      require('ts-node/register');
      TaskExecutor = require('./backend/services/taskExecutor').TaskExecutor;
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ TaskExecutor:', error.message);
    return false;
  }
  
  const logger = new MockLogger();
  const executor = new TaskExecutor(logger, 2); // –ú–∞–∫—Å–∏–º—É–º 2 –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
  
  // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏—è
  executor.on('task-started', (data) => {
    console.log(`üöÄ –ó–∞–¥–∞—á–∞ –∑–∞–ø—É—â–µ–Ω–∞: ${data.name} (${data.taskId})`);
  });
  
  executor.on('task-progress', (data) => {
    console.log(`üìä –ü—Ä–æ–≥—Ä–µ—Å—Å ${data.taskId}: ${data.progress}% - ${data.message}`);
  });
  
  executor.on('task-completed', (data) => {
    console.log(`‚úÖ –ó–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: ${data.taskId} –∑–∞ ${data.duration}ms`);
  });
  
  executor.on('task-failed', (data) => {
    console.log(`‚ùå –ó–∞–¥–∞—á–∞ –ø—Ä–æ–≤–∞–ª–µ–Ω–∞: ${data.taskId} - ${data.error}`);
  });
  
  try {
    console.log('\\nüîß –¢–µ—Å—Ç 1: Deploy Task');
    const deployResult = await executor.runDeployTask({
      serverId: 'test-server-1',
      host: '213.181.108.221',
      port: 39166,
      username: 'root',
      privateKey: '/path/to/key',
      deployPath: '/tmp/llm_deploy',
      llmPort: 8080
    });
    
    console.log('Deploy —Ä–µ–∑—É–ª—å—Ç–∞—Ç:', deployResult.success ? '‚úÖ –£—Å–ø–µ—Ö' : '‚ùå –û—à–∏–±–∫–∞');
    
    console.log('\\nüåê –¢–µ—Å—Ç 2: Connect Task');
    const connectResult = await executor.runConnectTask({
      serverId: 'test-server-1',
      host: '213.181.108.221',
      port: 39166,
      username: 'root',
      privateKey: '/path/to/key',
      llmPort: 8080,
      localPort: 8081
    });
    
    console.log('Connect —Ä–µ–∑—É–ª—å—Ç–∞—Ç:', connectResult.success ? '‚úÖ –£—Å–ø–µ—Ö' : '‚ùå –û—à–∏–±–∫–∞');
    
    console.log('\\nüí¨ –¢–µ—Å—Ç 3: Chat Task');
    const chatResult = await executor.runChatTask({
      serverId: 'test-server-1',
      baseUrl: 'http://localhost:8081',
      model: 'gpt-3.5-turbo',
      messages: [
        { role: 'user', content: '–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?' },
        { role: 'user', content: '–†–∞—Å—Å–∫–∞–∂–∏ –æ —Å–µ–±–µ' }
      ]
    });
    
    console.log('Chat —Ä–µ–∑—É–ª—å—Ç–∞—Ç:', chatResult.success ? '‚úÖ –£—Å–ø–µ—Ö' : '‚ùå –û—à–∏–±–∫–∞');
    
    // –¢–µ—Å—Ç –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    console.log('\\n‚ö° –¢–µ—Å—Ç 4: –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ');
    const parallelPromises = [
      executor.runDeployTask({
        serverId: 'parallel-1',
        host: '192.168.1.100',
        port: 22,
        username: 'user',
        privateKey: '/path/to/key',
        deployPath: '/tmp/parallel1',
        llmPort: 8082
      }),
      executor.runConnectTask({
        serverId: 'parallel-2',
        host: '192.168.1.101',
        port: 22,
        username: 'user',
        privateKey: '/path/to/key',
        llmPort: 8083,
        localPort: 8084
      })
    ];
    
    const parallelResults = await Promise.all(parallelPromises);
    console.log('–ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:', parallelResults.map(r => r.success ? '‚úÖ' : '‚ùå').join(' '));
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    const stats = executor.getStats();
    console.log('\\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ TaskExecutor:');
    console.log(`   –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á: ${stats.activeTasks}`);
    console.log(`   –í –æ—á–µ—Ä–µ–¥–∏: ${stats.queuedTasks}`);
    console.log(`   –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${stats.totalProcessed}`);
    console.log(`   –ú–∞–∫—Å–∏–º—É–º –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ: ${stats.maxConcurrent}`);
    
    // Graceful shutdown
    await executor.shutdown();
    console.log('\\nüèÅ TaskExecutor –∑–∞–≤–µ—Ä—à–µ–Ω');
    
    return true;
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
    await executor.shutdown();
    return false;
  }
}

// –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
  console.log('üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ TaskExecutor —Å Tasks');
  console.log('=' * 60);
  
  try {
    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ JS —Ñ–∞–π–ª—ã
    await createTestTasks();
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º TaskExecutor
    const success = await testTaskExecutor();
    
    console.log('\\n' + '=' * 60);
    if (success) {
      console.log('‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!');
      console.log('üéØ TaskExecutor –≥–æ—Ç–æ–≤ –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å ServerManager');
    } else {
      console.log('‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å');
    }
    
    process.exit(success ? 0 : 1);
    
  } catch (error) {
    console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
if (require.main === module) {
  main();
}

module.exports = { testTaskExecutor };
