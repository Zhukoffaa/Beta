#!/usr/bin/env node

/**
 * STAGE 5 - –§–ê–ó–ê 2: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ UI —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
 * –£—á–∏—Ç—ã–≤–∞–µ—Ç —Ä–µ–∞–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ–µ–∫—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
 */

const { spawn } = require('child_process');
const fs = require('fs');
const path = require('path');

class UITesterFixed {
    constructor() {
        this.results = {
            phase: '–§–ê–ó–ê 2: ELECTRON UI –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï (–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø)',
            startTime: new Date().toISOString(),
            tests: [],
            summary: {
                total: 0,
                passed: 0,
                failed: 0,
                warnings: 0
            }
        };
    }

    log(message, level = 'INFO') {
        const timestamp = new Date().toISOString();
        const logMessage = `[${timestamp}] [${level}] ${message}`;
        console.log(logMessage);
        
        if (!this.results.logs) this.results.logs = [];
        this.results.logs.push(logMessage);
    }

    addTest(name, status, details = '', duration = 0) {
        const test = {
            name,
            status, // 'PASS', 'FAIL', 'WARN'
            details,
            duration,
            timestamp: new Date().toISOString()
        };
        
        this.results.tests.push(test);
        this.results.summary.total++;
        
        if (status === 'PASS') this.results.summary.passed++;
        else if (status === 'FAIL') this.results.summary.failed++;
        else if (status === 'WARN') this.results.summary.warnings++;
        
        this.log(`${status}: ${name} ${details ? '- ' + details : ''}`, status);
    }

    async sleep(ms) {
        return new Promise(resolve => setTimeout(resolve, ms));
    }

    async runCommand(command, args = [], timeout = 30000) {
        return new Promise((resolve, reject) => {
            const startTime = Date.now();
            const process = spawn(command, args, { 
                shell: true,
                stdio: ['pipe', 'pipe', 'pipe']
            });
            
            let stdout = '';
            let stderr = '';
            
            process.stdout.on('data', (data) => {
                stdout += data.toString();
            });
            
            process.stderr.on('data', (data) => {
                stderr += data.toString();
            });
            
            const timer = setTimeout(() => {
                process.kill('SIGTERM');
                resolve({
                    success: true,
                    stdout,
                    stderr,
                    duration: Date.now() - startTime,
                    timedOut: true
                });
            }, timeout);
            
            process.on('close', (code) => {
                clearTimeout(timer);
                resolve({
                    success: code === 0,
                    stdout,
                    stderr,
                    duration: Date.now() - startTime,
                    code
                });
            });
            
            process.on('error', (error) => {
                clearTimeout(timer);
                reject(error);
            });
        });
    }

    async testProjectStructure() {
        this.log('üèóÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞...');
        
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–∞—Ç–∞–ª–æ–≥–∏
            const requiredDirs = [
                'backend',
                'renderer', 
                'tasks',
                'tools',
                'configs',
                'node_modules'
            ];
            
            for (const dir of requiredDirs) {
                if (fs.existsSync(dir)) {
                    this.addTest(`–ö–∞—Ç–∞–ª–æ–≥ ${dir} —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`, 'PASS');
                } else {
                    this.addTest(`–ö–∞—Ç–∞–ª–æ–≥ ${dir} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç`, 'FAIL');
                }
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ —Ñ–∞–π–ª—ã TypeScript (–Ω–µ —Å–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ)
            const sourceFiles = [
                'backend/main.ts',
                'backend/services/logger.ts',
                'backend/services/config.ts',
                'backend/services/sshService.ts',
                'backend/services/llmService.ts',
                'backend/services/taskExecutor.ts',
                'backend/services/serverManager.ts',
                'tasks/deployTask.ts',
                'tasks/connectTask.ts',
                'tasks/chatTask.ts'
            ];
            
            for (const file of sourceFiles) {
                if (fs.existsSync(file)) {
                    this.addTest(`–ò—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª ${path.basename(file)}`, 'PASS');
                } else {
                    this.addTest(`–ò—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª ${path.basename(file)} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç`, 'FAIL');
                }
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º React –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
            const reactFiles = [
                'renderer/src/App.tsx',
                'renderer/src/index.tsx',
                'renderer/src/components/ServersPanel.tsx',
                'renderer/src/components/Chat.tsx',
                'renderer/src/components/LogViewer.tsx',
                'renderer/src/hooks/useIpc.ts'
            ];
            
            for (const file of reactFiles) {
                if (fs.existsSync(file)) {
                    this.addTest(`React –∫–æ–º–ø–æ–Ω–µ–Ω—Ç ${path.basename(file)}`, 'PASS');
                } else {
                    this.addTest(`React –∫–æ–º–ø–æ–Ω–µ–Ω—Ç ${path.basename(file)} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç`, 'FAIL');
                }
            }
            
        } catch (error) {
            this.addTest('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã', 'FAIL', error.message);
        }
    }

    async testApplicationLaunch() {
        this.log('üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...');
        
        try {
            // –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–∞ 15 —Å–µ–∫—É–Ω–¥
            this.log('–ó–∞–ø—É—Å–∫ npm run start –Ω–∞ 15 —Å–µ–∫—É–Ω–¥...');
            const result = await this.runCommand('npm', ['run', 'start'], 15000);
            
            if (result.timedOut) {
                this.addTest('–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—Å—Ç–∏–ª–æ—Å—å –∏ —Ä–∞–±–æ—Ç–∞–ª–æ 15 —Å–µ–∫—É–Ω–¥', 'PASS', 
                    '–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—Å—Ç–∏–ª–æ—Å—å –∏ –±—ã–ª–æ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–∫—Ä—ã—Ç–æ');
            } else if (result.success) {
                this.addTest('–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—Å—Ç–∏–ª–æ—Å—å', 'PASS', 
                    `–ó–∞–≤–µ—Ä—à–∏–ª–æ—Å—å —Å –∫–æ–¥–æ–º ${result.code}`);
            } else {
                this.addTest('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è', 'FAIL', 
                    `–ö–æ–¥: ${result.code}`);
            }
            
            // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—ã–≤–æ–¥ —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º–∏ —Ä–µ–≥—É–ª—è—Ä–Ω—ã–º–∏ –≤—ã—Ä–∞–∂–µ–Ω–∏—è–º–∏
            const output = result.stdout + result.stderr;
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã —É—Å–ø–µ—à–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
            const checks = [
                {
                    pattern: /Found 0 errors/i,
                    name: 'TypeScript –∫–æ–º–ø–∏–ª—è—Ü–∏—è –±–µ–∑ –æ—à–∏–±–æ–∫',
                    required: true
                },
                {
                    pattern: /webpack.*compiled successfully/i,
                    name: 'Webpack –∫–æ–º–ø–∏–ª—è—Ü–∏—è —É—Å–ø–µ—à–Ω–∞',
                    required: true
                },
                {
                    pattern: /Preload script loaded successfully/i,
                    name: 'Preload script –∑–∞–≥—Ä—É–∂–µ–Ω',
                    required: true
                },
                {
                    pattern: /Project is running at.*localhost:3000/i,
                    name: 'Dev-server –∑–∞–ø—É—â–µ–Ω –Ω–∞ localhost:3000',
                    required: true
                },
                {
                    pattern: /Failed to load image.*icon/i,
                    name: '–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –∏–∫–æ–Ω–∫–∏',
                    required: false
                },
                {
                    pattern: /concurrently/i,
                    name: 'Concurrently –∑–∞–ø—É—â–µ–Ω',
                    required: true
                },
                {
                    pattern: /electron/i,
                    name: 'Electron –ø—Ä–æ—Ü–µ—Å—Å –∞–∫—Ç–∏–≤–µ–Ω',
                    required: true
                }
            ];
            
            for (const check of checks) {
                if (check.pattern.test(output)) {
                    this.addTest(check.name, 'PASS');
                } else {
                    this.addTest(check.name, check.required ? 'FAIL' : 'WARN', 
                        check.required ? '–û–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞' : '–ù–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞');
                }
            }
            
            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—ã–≤–æ–¥–∞
            if (output.includes('npm run dev:backend')) {
                this.addTest('Backend –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–ø—É—â–µ–Ω', 'PASS');
            } else {
                this.addTest('Backend –ø—Ä–æ—Ü–µ—Å—Å –Ω–µ –∑–∞–ø—É—â–µ–Ω', 'FAIL');
            }
            
            if (output.includes('npm run dev:renderer')) {
                this.addTest('Renderer –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–ø—É—â–µ–Ω', 'PASS');
            } else {
                this.addTest('Renderer –ø—Ä–æ—Ü–µ—Å—Å –Ω–µ –∑–∞–ø—É—â–µ–Ω', 'FAIL');
            }
            
            if (output.includes('npm run dev:electron')) {
                this.addTest('Electron –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–ø—É—â–µ–Ω', 'PASS');
            } else {
                this.addTest('Electron –ø—Ä–æ—Ü–µ—Å—Å –Ω–µ –∑–∞–ø—É—â–µ–Ω', 'FAIL');
            }
            
        } catch (error) {
            this.addTest('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ', 'FAIL', error.message);
        }
    }

    async testConfigurationFiles() {
        this.log('üìã –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤...');
        
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º package.json
            if (fs.existsSync('package.json')) {
                const packageData = JSON.parse(fs.readFileSync('package.json', 'utf8'));
                this.addTest('–§–∞–π–ª package.json —á–∏—Ç–∞–µ—Ç—Å—è', 'PASS');
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∫—Ä–∏–ø—Ç—ã
                const requiredScripts = ['start', 'dev', 'build', 'dev:full'];
                for (const script of requiredScripts) {
                    if (packageData.scripts && packageData.scripts[script]) {
                        this.addTest(`–°–∫—Ä–∏–ø—Ç ${script} –æ–ø—Ä–µ–¥–µ–ª–µ–Ω`, 'PASS');
                    } else {
                        this.addTest(`–°–∫—Ä–∏–ø—Ç ${script} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç`, 'FAIL');
                    }
                }
            } else {
                this.addTest('–§–∞–π–ª package.json –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç', 'FAIL');
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º servers.json
            const serversPath = 'configs/servers.json';
            if (fs.existsSync(serversPath)) {
                const serversData = JSON.parse(fs.readFileSync(serversPath, 'utf8'));
                
                this.addTest('–§–∞–π–ª servers.json —á–∏—Ç–∞–µ—Ç—Å—è', 'PASS');
                
                if (serversData.servers && Array.isArray(serversData.servers)) {
                    this.addTest('–°—Ç—Ä—É–∫—Ç—É—Ä–∞ servers.json –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞', 'PASS', 
                        `–ù–∞–π–¥–µ–Ω–æ ${serversData.servers.length} —Å–µ—Ä–≤–µ—Ä–æ–≤`);
                    
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—ã–π —Å–µ—Ä–≤–µ—Ä
                    if (serversData.servers.length > 0) {
                        const server = serversData.servers[0];
                        const requiredFields = ['id', 'name', 'host', 'port', 'user'];
                        
                        for (const field of requiredFields) {
                            if (server[field]) {
                                this.addTest(`–ü–æ–ª–µ ${field} –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–µ—Ä–≤–µ—Ä–∞`, 'PASS');
                            } else {
                                this.addTest(`–ü–æ–ª–µ ${field} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç`, 'FAIL');
                            }
                        }
                    }
                } else {
                    this.addTest('–°—Ç—Ä—É–∫—Ç—É—Ä–∞ servers.json –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞', 'FAIL');
                }
            } else {
                this.addTest('–§–∞–π–ª servers.json –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç', 'FAIL');
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º TypeScript –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            const tsConfigs = [
                'tsconfig.json',
                'backend/tsconfig.json',
                'renderer/tsconfig.json'
            ];
            
            for (const config of tsConfigs) {
                if (fs.existsSync(config)) {
                    this.addTest(`TypeScript –∫–æ–Ω—Ñ–∏–≥ ${config}`, 'PASS');
                } else {
                    this.addTest(`TypeScript –∫–æ–Ω—Ñ–∏–≥ ${config} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç`, 'WARN');
                }
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º SSH –∫–ª—é—á–∏
            const sshKeyPath = 'configs/ssh_keys/llm_server_key';
            if (fs.existsSync(sshKeyPath)) {
                this.addTest('SSH –∫–ª—é—á –Ω–∞–π–¥–µ–Ω', 'PASS');
            } else {
                this.addTest('SSH –∫–ª—é—á –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç', 'FAIL', '–ù–µ–æ–±—Ö–æ–¥–∏–º –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É');
            }
            
        } catch (error) {
            this.addTest('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π', 'FAIL', error.message);
        }
    }

    async testDependencies() {
        this.log('üì¶ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...');
        
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º node_modules
            if (fs.existsSync('node_modules')) {
                this.addTest('–ö–∞—Ç–∞–ª–æ–≥ node_modules —Å—É—â–µ—Å—Ç–≤—É–µ—Ç', 'PASS');
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
                const keyDeps = [
                    'electron',
                    'react',
                    'react-dom',
                    'typescript',
                    'ssh2',
                    'yaml',
                    'concurrently',
                    'wait-on'
                ];
                
                for (const dep of keyDeps) {
                    if (fs.existsSync(`node_modules/${dep}`)) {
                        this.addTest(`–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å ${dep}`, 'PASS');
                    } else {
                        this.addTest(`–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å ${dep} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç`, 'FAIL');
                    }
                }
            } else {
                this.addTest('–ö–∞—Ç–∞–ª–æ–≥ node_modules –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç', 'FAIL', '–ó–∞–ø—É—Å—Ç–∏—Ç–µ npm install');
            }
            
        } catch (error) {
            this.addTest('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π', 'FAIL', error.message);
        }
    }

    async testBuildSystem() {
        this.log('üîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã —Å–±–æ—Ä–∫–∏...');
        
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º Webpack –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            const webpackConfig = 'renderer/webpack.config.js';
            if (fs.existsSync(webpackConfig)) {
                this.addTest('Webpack –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–∞–π–¥–µ–Ω–∞', 'PASS');
            } else {
                this.addTest('Webpack –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç', 'FAIL');
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º Tailwind –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            const tailwindConfig = 'tailwind.config.js';
            if (fs.existsSync(tailwindConfig)) {
                this.addTest('Tailwind –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–∞–π–¥–µ–Ω–∞', 'PASS');
            } else {
                this.addTest('Tailwind –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç', 'WARN');
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º PostCSS –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            const postcssConfig = 'postcss.config.js';
            if (fs.existsSync(postcssConfig)) {
                this.addTest('PostCSS –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–∞–π–¥–µ–Ω–∞', 'PASS');
            } else {
                this.addTest('PostCSS –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç', 'WARN');
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º renderer/dist (—Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–±–æ—Ä–∫–∏)
            if (fs.existsSync('renderer/dist')) {
                const distFiles = fs.readdirSync('renderer/dist');
                if (distFiles.length > 0) {
                    this.addTest('Renderer —Å–æ–±—Ä–∞–Ω', 'PASS', `–§–∞–π–ª–æ–≤: ${distFiles.length}`);
                } else {
                    this.addTest('Renderer –Ω–µ —Å–æ–±—Ä–∞–Ω', 'WARN', '–ö–∞—Ç–∞–ª–æ–≥ dist –ø—É—Å—Ç–æ–π');
                }
            } else {
                this.addTest('–ö–∞—Ç–∞–ª–æ–≥ renderer/dist –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç', 'WARN', '–ó–∞–ø—É—Å—Ç–∏—Ç–µ npm run build');
            }
            
        } catch (error) {
            this.addTest('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–∏—Å—Ç–µ–º—ã —Å–±–æ—Ä–∫–∏', 'FAIL', error.message);
        }
    }

    generateReport() {
        this.results.endTime = new Date().toISOString();
        this.results.duration = new Date(this.results.endTime) - new Date(this.results.startTime);
        
        const report = `# STAGE 5 - –§–ê–ó–ê 2: –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –û–¢–ß–ï–¢ UI –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø

## üìä –°–í–û–î–ö–ê –†–ï–ó–£–õ–¨–¢–ê–¢–û–í

**–ü–µ—Ä–∏–æ–¥ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:** ${this.results.startTime} - ${this.results.endTime}  
**–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:** ${Math.round(this.results.duration / 1000)} —Å–µ–∫—É–Ω–¥

### –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–µ—Å—Ç–æ–≤:
- **–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤:** ${this.results.summary.total}
- **‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ:** ${this.results.summary.passed}
- **‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ:** ${this.results.summary.failed}
- **‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è:** ${this.results.summary.warnings}

**–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞:** ${Math.round((this.results.summary.passed / this.results.summary.total) * 100)}%

## üìã –î–ï–¢–ê–õ–¨–ù–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´

${this.results.tests.map(test => {
    const icon = test.status === 'PASS' ? '‚úÖ' : test.status === 'FAIL' ? '‚ùå' : '‚ö†Ô∏è';
    return `### ${icon} ${test.name}
**–°—Ç–∞—Ç—É—Å:** ${test.status}  
**–î–µ—Ç–∞–ª–∏:** ${test.details || '–ù–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏'}  
**–í—Ä–µ–º—è:** ${test.timestamp}
`;
}).join('\n')}

## üéØ –í–´–í–û–î–´

### –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã (—Ç—Ä–µ–±—É—é—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è):
${this.results.tests.filter(t => t.status === 'FAIL').map(t => `- ‚ùå ${t.name}: ${t.details}`).join('\n') || '–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–æ'}

### –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–∏—Ç—å):
${this.results.tests.filter(t => t.status === 'WARN').map(t => `- ‚ö†Ô∏è ${t.name}: ${t.details}`).join('\n') || '–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π –Ω–µ—Ç'}

### –£—Å–ø–µ—à–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏:
${this.results.tests.filter(t => t.status === 'PASS').length} –∏–∑ ${this.results.summary.total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ

## üöÄ –ì–û–¢–û–í–ù–û–°–¢–¨ –ö –§–ê–ó–ï 3

${this.results.summary.failed === 0 ? 
    '‚úÖ **–ì–û–¢–û–í –ö –§–ê–ó–ï 3** - –í—Å–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã' : 
    this.results.summary.failed <= 3 ?
    '‚ö†Ô∏è **–£–°–õ–û–í–ù–û –ì–û–¢–û–í –ö –§–ê–ó–ï 3** - –ï—Å—Ç—å –º–∏–Ω–æ—Ä–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã, –Ω–æ –º–æ–∂–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å' :
    '‚ùå **–ù–ï –ì–û–¢–û–í –ö –§–ê–ó–ï 3** - –ï—Å—Ç—å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏, —Ç—Ä–µ–±—É—é—â–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è'}

## üìà –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò

### –î–ª—è —É–ª—É—á—à–µ–Ω–∏—è:
1. **–ò—Å–ø—Ä–∞–≤–∏—Ç—å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏** - —É—Å—Ç—Ä–∞–Ω–∏—Ç—å –≤—Å–µ FAIL —Å—Ç–∞—Ç—É—Å—ã
2. **–û–±—Ä–∞—Ç–∏—Ç—å –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è** - —É–ª—É—á—à–∏—Ç—å WARN —Å—Ç–∞—Ç—É—Å—ã  
3. **–î–æ–±–∞–≤–∏—Ç—å –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ —Ñ–∞–π–ª—ã** - —Å–æ–∑–¥–∞—Ç—å –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
4. **–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–±–æ—Ä–∫—É** - –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –∫–æ–º–ø–∏–ª—è—Ü–∏—é

### –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:
1. –ü–µ—Ä–µ–π—Ç–∏ –∫ –§–∞–∑–µ 3 (IPC —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ) –µ—Å–ª–∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å > 85%
2. –ò—Å–ø—Ä–∞–≤–∏—Ç—å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã –µ—Å–ª–∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å < 85%
3. –ü—Ä–æ–≤–µ—Å—Ç–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ UI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤

---

**–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ:** ${new Date().toISOString()}  
**–í–µ—Ä—Å–∏—è —Ç–µ—Å—Ç–µ—Ä–∞:** 2.0.0 (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è)
`;

        return report;
    }

    async run() {
        this.log('üéØ –ù–∞—á–∞–ª–æ –§–ê–ó–´ 2: –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ï ELECTRON UI –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï');
        
        await this.testDependencies();
        await this.testProjectStructure();
        await this.testBuildSystem();
        await this.testConfigurationFiles();
        await this.testApplicationLaunch();
        
        const report = this.generateReport();
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
        fs.writeFileSync('STAGE5_PHASE2_FIXED_REPORT.md', report);
        this.log('üìÑ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ STAGE5_PHASE2_FIXED_REPORT.md');
        
        // –í—ã–≤–æ–¥–∏–º –∫—Ä–∞—Ç–∫—É—é —Å–≤–æ–¥–∫—É
        console.log('\n' + '='.repeat(60));
        console.log('üìä –ö–†–ê–¢–ö–ê–Ø –°–í–û–î–ö–ê –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ô –§–ê–ó–´ 2');
        console.log('='.repeat(60));
        console.log(`‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: ${this.results.summary.passed}`);
        console.log(`‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: ${this.results.summary.failed}`);
        console.log(`‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è: ${this.results.summary.warnings}`);
        console.log(`üìà –£—Å–ø–µ—Ö: ${Math.round((this.results.summary.passed / this.results.summary.total) * 100)}%`);
        
        const successRate = (this.results.summary.passed / this.results.summary.total) * 100;
        
        if (successRate >= 90) {
            console.log('\nüéâ –§–ê–ó–ê 2 –ó–ê–í–ï–†–®–ï–ù–ê –û–¢–õ–ò–ß–ù–û! –ì–æ—Ç–æ–≤ –∫ –ø–µ—Ä–µ—Ö–æ–¥—É –∫ –§–∞–∑–µ 3.');
        } else if (successRate >= 85) {
            console.log('\n‚úÖ –§–ê–ó–ê 2 –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û! –ì–æ—Ç–æ–≤ –∫ –ø–µ—Ä–µ—Ö–æ–¥—É –∫ –§–∞–∑–µ 3.');
        } else if (successRate >= 70) {
            console.log('\n‚ö†Ô∏è –§–ê–ó–ê 2 –ó–ê–í–ï–†–®–ï–ù–ê –° –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–Ø–ú–ò. –ú–æ–∂–Ω–æ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç—å –∫ –§–∞–∑–µ 3, –Ω–æ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—ã.');
        } else {
            console.log('\n‚ùå –§–ê–ó–ê 2 –ó–ê–í–ï–†–®–ï–ù–ê –° –û–®–ò–ë–ö–ê–ú–ò. –¢—Ä–µ–±—É–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –§–∞–∑–æ–π 3.');
        }
        
        return successRate >= 70; // 70% - –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä–æ–≥ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –§–∞–∑–µ 3
    }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
if (require.main === module) {
    const tester = new UITesterFixed();
    tester.run().then(success => {
        process.exit(success ? 0 : 1);
    }).catch(error => {
        console.error('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–µ—Ä–∞:', error);
        process.exit(1);
    });
}

module.exports = UITesterFixed;
