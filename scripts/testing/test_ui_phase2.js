#!/usr/bin/env node

/**
 * STAGE 5 - –§–ê–ó–ê 2: –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ UI —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
 * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç Electron –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –±—Ä–∞—É–∑–µ—Ä –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
 */

const { spawn } = require('child_process');
const fs = require('fs');
const path = require('path');

class UITester {
    constructor() {
        this.results = {
            phase: '–§–ê–ó–ê 2: ELECTRON UI –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï',
            startTime: new Date().toISOString(),
            tests: [],
            summary: {
                total: 0,
                passed: 0,
                failed: 0,
                warnings: 0
            }
        };
    }

    log(message, level = 'INFO') {
        const timestamp = new Date().toISOString();
        const logMessage = `[${timestamp}] [${level}] ${message}`;
        console.log(logMessage);
        
        if (!this.results.logs) this.results.logs = [];
        this.results.logs.push(logMessage);
    }

    addTest(name, status, details = '', duration = 0) {
        const test = {
            name,
            status, // 'PASS', 'FAIL', 'WARN'
            details,
            duration,
            timestamp: new Date().toISOString()
        };
        
        this.results.tests.push(test);
        this.results.summary.total++;
        
        if (status === 'PASS') this.results.summary.passed++;
        else if (status === 'FAIL') this.results.summary.failed++;
        else if (status === 'WARN') this.results.summary.warnings++;
        
        this.log(`${status}: ${name} ${details ? '- ' + details : ''}`, status);
    }

    async sleep(ms) {
        return new Promise(resolve => setTimeout(resolve, ms));
    }

    async runCommand(command, args = [], timeout = 30000) {
        return new Promise((resolve, reject) => {
            const startTime = Date.now();
            const process = spawn(command, args, { 
                shell: true,
                stdio: ['pipe', 'pipe', 'pipe']
            });
            
            let stdout = '';
            let stderr = '';
            
            process.stdout.on('data', (data) => {
                stdout += data.toString();
            });
            
            process.stderr.on('data', (data) => {
                stderr += data.toString();
            });
            
            const timer = setTimeout(() => {
                process.kill('SIGTERM');
                resolve({
                    success: true,
                    stdout,
                    stderr,
                    duration: Date.now() - startTime,
                    timedOut: true
                });
            }, timeout);
            
            process.on('close', (code) => {
                clearTimeout(timer);
                resolve({
                    success: code === 0,
                    stdout,
                    stderr,
                    duration: Date.now() - startTime,
                    code
                });
            });
            
            process.on('error', (error) => {
                clearTimeout(timer);
                reject(error);
            });
        });
    }

    async testApplicationLaunch() {
        this.log('üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...');
        
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ —Ñ–∞–π–ª—ã –Ω–∞ –º–µ—Å—Ç–µ
            const requiredFiles = [
                'package.json',
                'backend/main.js',
                'renderer/dist/index.html',
                'renderer/dist/bundle.js'
            ];
            
            for (const file of requiredFiles) {
                if (fs.existsSync(file)) {
                    this.addTest(`–§–∞–π–ª ${file} —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`, 'PASS');
                } else {
                    this.addTest(`–§–∞–π–ª ${file} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç`, 'FAIL');
                }
            }
            
            // –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–∞ 10 —Å–µ–∫—É–Ω–¥
            this.log('–ó–∞–ø—É—Å–∫ npm run start –Ω–∞ 10 —Å–µ–∫—É–Ω–¥...');
            const result = await this.runCommand('npm', ['run', 'start'], 10000);
            
            if (result.timedOut) {
                this.addTest('–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—Å—Ç–∏–ª–æ—Å—å –∏ —Ä–∞–±–æ—Ç–∞–ª–æ 10 —Å–µ–∫—É–Ω–¥', 'PASS', 
                    '–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—Å—Ç–∏–ª–æ—Å—å –∏ –±—ã–ª–æ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–∫—Ä—ã—Ç–æ —á–µ—Ä–µ–∑ 10 —Å–µ–∫');
            } else if (result.success) {
                this.addTest('–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—Å—Ç–∏–ª–æ—Å—å', 'PASS', 
                    `–ó–∞–≤–µ—Ä—à–∏–ª–æ—Å—å —Å –∫–æ–¥–æ–º ${result.code}`);
            } else {
                this.addTest('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è', 'FAIL', 
                    `–ö–æ–¥: ${result.code}, stderr: ${result.stderr.substring(0, 200)}`);
            }
            
            // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—ã–≤–æ–¥
            const output = result.stdout + result.stderr;
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã —É—Å–ø–µ—à–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
            const checks = [
                {
                    pattern: /Found 0 errors/,
                    name: 'TypeScript –∫–æ–º–ø–∏–ª—è—Ü–∏—è –±–µ–∑ –æ—à–∏–±–æ–∫',
                    required: true
                },
                {
                    pattern: /webpack.*compiled successfully/,
                    name: 'Webpack –∫–æ–º–ø–∏–ª—è—Ü–∏—è —É—Å–ø–µ—à–Ω–∞',
                    required: true
                },
                {
                    pattern: /Preload script loaded successfully/,
                    name: 'Preload script –∑–∞–≥—Ä—É–∂–µ–Ω',
                    required: true
                },
                {
                    pattern: /Project is running at.*localhost:3000/,
                    name: 'Dev-server –∑–∞–ø—É—â–µ–Ω –Ω–∞ localhost:3000',
                    required: true
                },
                {
                    pattern: /Failed to load image.*icon\.png/,
                    name: '–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –∏–∫–æ–Ω–∫–∏',
                    required: false
                }
            ];
            
            for (const check of checks) {
                if (check.pattern.test(output)) {
                    this.addTest(check.name, 'PASS');
                } else {
                    this.addTest(check.name, check.required ? 'FAIL' : 'WARN', 
                        check.required ? '–û–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞' : '–ù–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞');
                }
            }
            
        } catch (error) {
            this.addTest('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ', 'FAIL', error.message);
        }
    }

    async testConfigurationFiles() {
        this.log('üìã –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤...');
        
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º servers.json
            const serversPath = 'configs/servers.json';
            if (fs.existsSync(serversPath)) {
                const serversData = JSON.parse(fs.readFileSync(serversPath, 'utf8'));
                
                this.addTest('–§–∞–π–ª servers.json —á–∏—Ç–∞–µ—Ç—Å—è', 'PASS');
                
                if (serversData.servers && Array.isArray(serversData.servers)) {
                    this.addTest('–°—Ç—Ä—É–∫—Ç—É—Ä–∞ servers.json –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞', 'PASS', 
                        `–ù–∞–π–¥–µ–Ω–æ ${serversData.servers.length} —Å–µ—Ä–≤–µ—Ä–æ–≤`);
                    
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—ã–π —Å–µ—Ä–≤–µ—Ä
                    if (serversData.servers.length > 0) {
                        const server = serversData.servers[0];
                        const requiredFields = ['id', 'name', 'host', 'port', 'user'];
                        
                        for (const field of requiredFields) {
                            if (server[field]) {
                                this.addTest(`–ü–æ–ª–µ ${field} –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–µ—Ä–≤–µ—Ä–∞`, 'PASS');
                            } else {
                                this.addTest(`–ü–æ–ª–µ ${field} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç`, 'FAIL');
                            }
                        }
                    }
                } else {
                    this.addTest('–°—Ç—Ä—É–∫—Ç—É—Ä–∞ servers.json –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞', 'FAIL');
                }
            } else {
                this.addTest('–§–∞–π–ª servers.json –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç', 'FAIL');
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º app.yaml
            const appConfigPath = 'configs/app.yaml';
            if (fs.existsSync(appConfigPath)) {
                this.addTest('–§–∞–π–ª app.yaml —Å—É—â–µ—Å—Ç–≤—É–µ—Ç', 'PASS');
            } else {
                this.addTest('–§–∞–π–ª app.yaml –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç', 'WARN', '–ë—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ');
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º SSH –∫–ª—é—á–∏
            const sshKeyPath = 'configs/ssh_keys/llm_server_key';
            if (fs.existsSync(sshKeyPath)) {
                this.addTest('SSH –∫–ª—é—á –Ω–∞–π–¥–µ–Ω', 'PASS');
            } else {
                this.addTest('SSH –∫–ª—é—á –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç', 'FAIL', '–ù–µ–æ–±—Ö–æ–¥–∏–º –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É');
            }
            
        } catch (error) {
            this.addTest('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π', 'FAIL', error.message);
        }
    }

    async testBuildArtifacts() {
        this.log('üîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤ —Å–±–æ—Ä–∫–∏...');
        
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º backend —Å–±–æ—Ä–∫—É
            const backendFiles = [
                'dist/backend/main.js',
                'dist/backend/services/logger.js',
                'dist/backend/services/config.js',
                'dist/backend/services/sshService.js',
                'dist/backend/services/llmService.js',
                'dist/backend/services/taskExecutor.js',
                'dist/backend/services/serverManager.js'
            ];
            
            for (const file of backendFiles) {
                if (fs.existsSync(file)) {
                    this.addTest(`Backend —Ñ–∞–π–ª ${path.basename(file)}`, 'PASS');
                } else {
                    this.addTest(`Backend —Ñ–∞–π–ª ${path.basename(file)} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç`, 'FAIL');
                }
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º frontend —Å–±–æ—Ä–∫—É
            const frontendFiles = [
                'renderer/dist/index.html',
                'renderer/dist/bundle.js'
            ];
            
            for (const file of frontendFiles) {
                if (fs.existsSync(file)) {
                    const stats = fs.statSync(file);
                    this.addTest(`Frontend —Ñ–∞–π–ª ${path.basename(file)}`, 'PASS', 
                        `–†–∞–∑–º–µ—Ä: ${Math.round(stats.size / 1024)}KB`);
                } else {
                    this.addTest(`Frontend —Ñ–∞–π–ª ${path.basename(file)} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç`, 'FAIL');
                }
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º tasks
            const taskFiles = [
                'dist/tasks/deployTask.js',
                'dist/tasks/connectTask.js',
                'dist/tasks/chatTask.js'
            ];
            
            for (const file of taskFiles) {
                if (fs.existsSync(file)) {
                    this.addTest(`Task —Ñ–∞–π–ª ${path.basename(file)}`, 'PASS');
                } else {
                    this.addTest(`Task —Ñ–∞–π–ª ${path.basename(file)} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç`, 'FAIL');
                }
            }
            
        } catch (error) {
            this.addTest('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤', 'FAIL', error.message);
        }
    }

    async testDependencies() {
        this.log('üì¶ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...');
        
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º node_modules
            if (fs.existsSync('node_modules')) {
                this.addTest('–ö–∞—Ç–∞–ª–æ–≥ node_modules —Å—É—â–µ—Å—Ç–≤—É–µ—Ç', 'PASS');
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
                const keyDeps = [
                    'electron',
                    'react',
                    'react-dom',
                    'typescript',
                    'ssh2',
                    'yaml'
                ];
                
                for (const dep of keyDeps) {
                    if (fs.existsSync(`node_modules/${dep}`)) {
                        this.addTest(`–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å ${dep}`, 'PASS');
                    } else {
                        this.addTest(`–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å ${dep} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç`, 'FAIL');
                    }
                }
            } else {
                this.addTest('–ö–∞—Ç–∞–ª–æ–≥ node_modules –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç', 'FAIL', '–ó–∞–ø—É—Å—Ç–∏—Ç–µ npm install');
            }
            
        } catch (error) {
            this.addTest('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π', 'FAIL', error.message);
        }
    }

    generateReport() {
        this.results.endTime = new Date().toISOString();
        this.results.duration = new Date(this.results.endTime) - new Date(this.results.startTime);
        
        const report = `# STAGE 5 - –§–ê–ó–ê 2: –û–¢–ß–ï–¢ UI –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø

## üìä –°–í–û–î–ö–ê –†–ï–ó–£–õ–¨–¢–ê–¢–û–í

**–ü–µ—Ä–∏–æ–¥ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:** ${this.results.startTime} - ${this.results.endTime}  
**–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:** ${Math.round(this.results.duration / 1000)} —Å–µ–∫—É–Ω–¥

### –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–µ—Å—Ç–æ–≤:
- **–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤:** ${this.results.summary.total}
- **‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ:** ${this.results.summary.passed}
- **‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ:** ${this.results.summary.failed}
- **‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è:** ${this.results.summary.warnings}

**–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞:** ${Math.round((this.results.summary.passed / this.results.summary.total) * 100)}%

## üìã –î–ï–¢–ê–õ–¨–ù–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´

${this.results.tests.map(test => {
    const icon = test.status === 'PASS' ? '‚úÖ' : test.status === 'FAIL' ? '‚ùå' : '‚ö†Ô∏è';
    return `### ${icon} ${test.name}
**–°—Ç–∞—Ç—É—Å:** ${test.status}  
**–î–µ—Ç–∞–ª–∏:** ${test.details || '–ù–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏'}  
**–í—Ä–µ–º—è:** ${test.timestamp}
`;
}).join('\n')}

## üéØ –í–´–í–û–î–´

### –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã (—Ç—Ä–µ–±—É—é—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è):
${this.results.tests.filter(t => t.status === 'FAIL').map(t => `- ‚ùå ${t.name}: ${t.details}`).join('\n') || '–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–æ'}

### –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–∏—Ç—å):
${this.results.tests.filter(t => t.status === 'WARN').map(t => `- ‚ö†Ô∏è ${t.name}: ${t.details}`).join('\n') || '–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π –Ω–µ—Ç'}

### –£—Å–ø–µ—à–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏:
${this.results.tests.filter(t => t.status === 'PASS').length} –∏–∑ ${this.results.summary.total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ

## üöÄ –ì–û–¢–û–í–ù–û–°–¢–¨ –ö –§–ê–ó–ï 3

${this.results.summary.failed === 0 ? 
    '‚úÖ **–ì–û–¢–û–í –ö –§–ê–ó–ï 3** - –í—Å–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã' : 
    '‚ùå **–ù–ï –ì–û–¢–û–í –ö –§–ê–ó–ï 3** - –ï—Å—Ç—å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏, —Ç—Ä–µ–±—É—é—â–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è'}

---

**–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ:** ${new Date().toISOString()}  
**–í–µ—Ä—Å–∏—è —Ç–µ—Å—Ç–µ—Ä–∞:** 1.0.0
`;

        return report;
    }

    async run() {
        this.log('üéØ –ù–∞—á–∞–ª–æ –§–ê–ó–´ 2: ELECTRON UI –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï');
        
        await this.testDependencies();
        await this.testBuildArtifacts();
        await this.testConfigurationFiles();
        await this.testApplicationLaunch();
        
        const report = this.generateReport();
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
        fs.writeFileSync('STAGE5_PHASE2_REPORT.md', report);
        this.log('üìÑ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ STAGE5_PHASE2_REPORT.md');
        
        // –í—ã–≤–æ–¥–∏–º –∫—Ä–∞—Ç–∫—É—é —Å–≤–æ–¥–∫—É
        console.log('\n' + '='.repeat(60));
        console.log('üìä –ö–†–ê–¢–ö–ê–Ø –°–í–û–î–ö–ê –§–ê–ó–´ 2');
        console.log('='.repeat(60));
        console.log(`‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: ${this.results.summary.passed}`);
        console.log(`‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: ${this.results.summary.failed}`);
        console.log(`‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è: ${this.results.summary.warnings}`);
        console.log(`üìà –£—Å–ø–µ—Ö: ${Math.round((this.results.summary.passed / this.results.summary.total) * 100)}%`);
        
        if (this.results.summary.failed === 0) {
            console.log('\nüéâ –§–ê–ó–ê 2 –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û! –ì–æ—Ç–æ–≤ –∫ –ø–µ—Ä–µ—Ö–æ–¥—É –∫ –§–∞–∑–µ 3.');
        } else {
            console.log('\n‚ö†Ô∏è –§–ê–ó–ê 2 –ó–ê–í–ï–†–®–ï–ù–ê –° –û–®–ò–ë–ö–ê–ú–ò. –¢—Ä–µ–±—É–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –§–∞–∑–æ–π 3.');
        }
        
        return this.results.summary.failed === 0;
    }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
if (require.main === module) {
    const tester = new UITester();
    tester.run().then(success => {
        process.exit(success ? 0 : 1);
    }).catch(error => {
        console.error('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–µ—Ä–∞:', error);
        process.exit(1);
    });
}

module.exports = UITester;
