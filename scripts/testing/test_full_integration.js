#!/usr/bin/env node

/**
 * –ü–æ–ª–Ω—ã–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç –¥–ª—è Windows LLM Agent
 * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é IPC, UI —Ö—É–∫–æ–≤, Backend —Å–ª—É–∂–± –∏ TaskExecutor
 */

const path = require('path');
const fs = require('fs');

// –ú–æ–∫ –¥–ª—è Electron IPC
class MockElectronAPI {
  constructor() {
    this.handlers = new Map();
    this.listeners = new Map();
  }

  // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è IPC –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
  handle(channel, handler) {
    this.handlers.set(channel, handler);
  }

  // –í—ã–∑–æ–≤ IPC –º–µ—Ç–æ–¥–∞
  async invoke(channel, ...args) {
    const handler = this.handlers.get(channel);
    if (!handler) {
      throw new Error(`No handler for channel: ${channel}`);
    }
    return await handler(null, ...args);
  }

  // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–æ–±—ã—Ç–∏—è
  on(channel, callback) {
    if (!this.listeners.has(channel)) {
      this.listeners.set(channel, []);
    }
    this.listeners.get(channel).push(callback);
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–±—ã—Ç–∏—è
  send(channel, data) {
    const callbacks = this.listeners.get(channel) || [];
    callbacks.forEach(callback => callback(data));
  }

  // –£–¥–∞–ª–µ–Ω–∏–µ —Å–ª—É—à–∞—Ç–µ–ª—è
  removeListener(channel, callback) {
    const callbacks = this.listeners.get(channel) || [];
    const index = callbacks.indexOf(callback);
    if (index > -1) {
      callbacks.splice(index, 1);
    }
  }
}

// –ú–æ–∫ –¥–ª—è Logger
class MockLogger {
  constructor() {
    this.logs = [];
  }

  log(level, message) {
    const entry = {
      level,
      message,
      timestamp: new Date().toISOString()
    };
    this.logs.push(entry);
    console.log(`[${level.toUpperCase()}] ${message}`);
  }

  info(message) { this.log('info', message); }
  warn(message) { this.log('warn', message); }
  error(message) { this.log('error', message); }
  debug(message) { this.log('debug', message); }
}

// –ú–æ–∫ –¥–ª—è ConfigService
class MockConfigService {
  constructor() {
    this.appConfig = {
      app: { name: 'Test Agent', debug: true },
      timeouts: { ssh: 30000, llm: 60000 },
      ui: { window: { width: 1200, height: 800 } }
    };
    
    this.servers = [
      {
        id: 'test-server',
        name: 'Test Server',
        host: '213.181.108.221',
        port: 39166,
        user: 'root',
        sshKey: 'configs/ssh_keys/id_rsa',
        deployPath: '/opt/llm',
        llmPort: 8080,
        status: 'disconnected',
        deployed: false,
        connected: false
      }
    ];
  }

  getAppConfig() {
    return this.appConfig;
  }

  getServers() {
    return { servers: this.servers };
  }

  updateServer(server) {
    const index = this.servers.findIndex(s => s.id === server.id);
    if (index >= 0) {
      this.servers[index] = { ...this.servers[index], ...server };
    }
    return { success: true };
  }
}

// –ú–æ–∫ –¥–ª—è ServerManager
class MockServerManager {
  constructor(logger, configService) {
    this.logger = logger;
    this.configService = configService;
    this.listeners = new Map();
  }

  on(event, callback) {
    if (!this.listeners.has(event)) {
      this.listeners.set(event, []);
    }
    this.listeners.get(event).push(callback);
  }

  emit(event, data) {
    const callbacks = this.listeners.get(event) || [];
    callbacks.forEach(callback => callback(data));
  }

  async testConnection(serverId) {
    this.logger.info(`Testing connection to server: ${serverId}`);
    
    // –≠–º—É–ª–∏—Ä—É–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
    this.emit('progress', { serverId, progress: 25, message: 'Connecting to SSH...' });
    await new Promise(resolve => setTimeout(resolve, 500));
    
    this.emit('progress', { serverId, progress: 75, message: 'Checking SSH connection...' });
    await new Promise(resolve => setTimeout(resolve, 500));
    
    this.emit('connection-tested', { serverId, success: true, message: 'SSH connection successful' });
    
    return { success: true, message: 'Connection test passed' };
  }

  async deployServer(serverId) {
    this.logger.info(`Deploying server: ${serverId}`);
    
    // –≠–º—É–ª–∏—Ä—É–µ–º —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ
    this.emit('deployment-progress', { serverId, progress: 10, message: 'Preparing deployment...' });
    await new Promise(resolve => setTimeout(resolve, 300));
    
    this.emit('deployment-progress', { serverId, progress: 30, message: 'Copying files...' });
    await new Promise(resolve => setTimeout(resolve, 500));
    
    this.emit('deployment-progress', { serverId, progress: 60, message: 'Installing dependencies...' });
    await new Promise(resolve => setTimeout(resolve, 700));
    
    this.emit('deployment-progress', { serverId, progress: 90, message: 'Starting LLM server...' });
    await new Promise(resolve => setTimeout(resolve, 400));
    
    this.emit('deployment-progress', { serverId, progress: 100, message: 'Deployment complete' });
    
    return { success: true, message: 'Server deployed successfully' };
  }

  async connectServer(serverId) {
    this.logger.info(`Connecting to server: ${serverId}`);
    
    this.emit('progress', { serverId, progress: 50, message: 'Creating SSH tunnel...' });
    await new Promise(resolve => setTimeout(resolve, 600));
    
    this.emit('server-ready', { serverId, connected: true });
    
    return { success: true, message: 'Connected to server' };
  }

  async disconnectServer(serverId) {
    this.logger.info(`Disconnecting from server: ${serverId}`);
    return { success: true, message: 'Disconnected from server' };
  }

  async ensureLLMReady(serverId) {
    this.logger.info(`Ensuring LLM ready on server: ${serverId}`);
    
    // –°–Ω–∞—á–∞–ª–∞ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–µ–º, –ø–æ—Ç–æ–º –ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è
    await this.deployServer(serverId);
    await this.connectServer(serverId);
    
    return { success: true, message: 'LLM server is ready' };
  }

  async chat(serverId, messages) {
    this.logger.info(`Chat request to server: ${serverId}`);
    
    // –≠–º—É–ª–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç LLM
    await new Promise(resolve => setTimeout(resolve, 800));
    
    return {
      response: '–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç –æ—Ç LLM —Å–µ—Ä–≤–µ—Ä–∞. –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!',
      timestamp: new Date().toISOString(),
      usage: { prompt_tokens: 10, completion_tokens: 15, total_tokens: 25 }
    };
  }

  async getModels(serverId) {
    this.logger.info(`Getting models from server: ${serverId}`);
    return {
      models: [
        { id: 'llama2-7b', name: 'Llama 2 7B' },
        { id: 'codellama-13b', name: 'Code Llama 13B' }
      ]
    };
  }

  getServerStatus(serverId) {
    const servers = this.configService.getServers().servers;
    const server = servers.find(s => s.id === serverId);
    return server || null;
  }

  getAllServers() {
    return this.configService.getServers().servers;
  }
}

// –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
class FullIntegrationTest {
  constructor() {
    this.electronAPI = new MockElectronAPI();
    this.logger = new MockLogger();
    this.configService = new MockConfigService();
    this.serverManager = new MockServerManager(this.logger, this.configService);
    
    this.setupIPC();
  }

  setupIPC() {
    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º IPC –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–∞–∫ –≤ main.ts
    this.electronAPI.handle('get-app-config', async () => {
      return this.configService.getAppConfig();
    });

    this.electronAPI.handle('get-servers', async () => {
      return this.configService.getServers();
    });

    this.electronAPI.handle('get-all-servers', async () => {
      return this.serverManager.getAllServers();
    });

    this.electronAPI.handle('get-server-status', async (_, serverId) => {
      return this.serverManager.getServerStatus(serverId);
    });

    this.electronAPI.handle('test-connection', async (_, serverId) => {
      return this.serverManager.testConnection(serverId);
    });

    this.electronAPI.handle('deploy-server', async (_, serverId) => {
      return this.serverManager.deployServer(serverId);
    });

    this.electronAPI.handle('connect-server', async (_, serverId) => {
      return this.serverManager.connectServer(serverId);
    });

    this.electronAPI.handle('disconnect-server', async (_, serverId) => {
      return this.serverManager.disconnectServer(serverId);
    });

    this.electronAPI.handle('ensure-llm-ready', async (_, serverId) => {
      return this.serverManager.ensureLLMReady(serverId);
    });

    this.electronAPI.handle('llm-chat', async (_, data) => {
      return this.serverManager.chat(data.serverId, data.messages);
    });

    this.electronAPI.handle('llm-get-models', async (_, serverId) => {
      return this.serverManager.getModels(serverId);
    });

    this.electronAPI.handle('update-server', async (_, server) => {
      return this.configService.updateServer(server);
    });

    // –ü–æ–¥–∫–ª—é—á–∞–µ–º —Å–æ–±—ã—Ç–∏—è ServerManager –∫ IPC
    this.serverManager.on('progress', (data) => {
      this.electronAPI.send('server-progress', data);
    });

    this.serverManager.on('deployment-progress', (data) => {
      this.electronAPI.send('deployment-progress', data);
    });

    this.serverManager.on('connection-tested', (data) => {
      this.electronAPI.send('connection-tested', data);
    });

    this.serverManager.on('server-ready', (data) => {
      this.electronAPI.send('server-ready', data);
    });
  }

  // –¢–µ—Å—Ç –±–∞–∑–æ–≤–æ–π IPC –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏
  async testBasicIPC() {
    console.log('\nüîß Testing Basic IPC Communication...');
    
    try {
      // –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
      const appConfig = await this.electronAPI.invoke('get-app-config');
      console.log('‚úÖ App config retrieved:', appConfig.app.name);
      
      // –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–æ–≤
      const servers = await this.electronAPI.invoke('get-all-servers');
      console.log('‚úÖ Servers retrieved:', servers.length, 'servers');
      
      // –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–µ—Ä–∞
      const status = await this.electronAPI.invoke('get-server-status', 'test-server');
      console.log('‚úÖ Server status retrieved:', status.name);
      
      return true;
    } catch (error) {
      console.error('‚ùå Basic IPC test failed:', error.message);
      return false;
    }
  }

  // –¢–µ—Å—Ç –æ–ø–µ—Ä–∞—Ü–∏–π —Å —Å–µ—Ä–≤–µ—Ä–∞–º–∏
  async testServerOperations() {
    console.log('\nüñ•Ô∏è Testing Server Operations...');
    
    try {
      const serverId = 'test-server';
      
      // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏—è
      const events = [];
      this.electronAPI.on('server-progress', (data) => {
        events.push({ type: 'progress', data });
      });
      this.electronAPI.on('connection-tested', (data) => {
        events.push({ type: 'connection-tested', data });
      });
      
      // –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
      console.log('Testing connection...');
      const connectionResult = await this.electronAPI.invoke('test-connection', serverId);
      console.log('‚úÖ Connection test result:', connectionResult.message);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–±—ã—Ç–∏—è
      await new Promise(resolve => setTimeout(resolve, 100));
      const progressEvents = events.filter(e => e.type === 'progress');
      const connectionEvents = events.filter(e => e.type === 'connection-tested');
      
      console.log('‚úÖ Progress events received:', progressEvents.length);
      console.log('‚úÖ Connection events received:', connectionEvents.length);
      
      return true;
    } catch (error) {
      console.error('‚ùå Server operations test failed:', error.message);
      return false;
    }
  }

  // –¢–µ—Å—Ç —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞
  async testServerDeployment() {
    console.log('\nüöÄ Testing Server Deployment...');
    
    try {
      const serverId = 'test-server';
      
      // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è
      const deploymentEvents = [];
      this.electronAPI.on('deployment-progress', (data) => {
        deploymentEvents.push(data);
        console.log(`  üìä Deployment progress: ${data.progress}% - ${data.message}`);
      });
      
      // –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ
      const deployResult = await this.electronAPI.invoke('deploy-server', serverId);
      console.log('‚úÖ Deployment result:', deployResult.message);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–±—ã—Ç–∏—è
      await new Promise(resolve => setTimeout(resolve, 100));
      console.log('‚úÖ Deployment events received:', deploymentEvents.length);
      
      return true;
    } catch (error) {
      console.error('‚ùå Server deployment test failed:', error.message);
      return false;
    }
  }

  // –¢–µ—Å—Ç –ø–æ–ª–Ω–æ–π –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞
  async testFullServerSetup() {
    console.log('\nüéØ Testing Full Server Setup...');
    
    try {
      const serverId = 'test-server';
      
      // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –≤—Å–µ —Å–æ–±—ã—Ç–∏—è
      const allEvents = [];
      ['deployment-progress', 'server-progress', 'server-ready'].forEach(eventType => {
        this.electronAPI.on(eventType, (data) => {
          allEvents.push({ type: eventType, data });
        });
      });
      
      // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–Ω—É—é –ø–æ–¥–≥–æ—Ç–æ–≤–∫—É
      const setupResult = await this.electronAPI.invoke('ensure-llm-ready', serverId);
      console.log('‚úÖ Full setup result:', setupResult.message);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–±—ã—Ç–∏—è
      await new Promise(resolve => setTimeout(resolve, 100));
      console.log('‚úÖ Total events received:', allEvents.length);
      
      return true;
    } catch (error) {
      console.error('‚ùå Full server setup test failed:', error.message);
      return false;
    }
  }

  // –¢–µ—Å—Ç LLM —á–∞—Ç–∞
  async testLLMChat() {
    console.log('\nüí¨ Testing LLM Chat...');
    
    try {
      const serverId = 'test-server';
      const messages = [
        { role: 'user', content: '–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?' }
      ];
      
      // –¢–µ—Å—Ç —á–∞—Ç–∞
      const chatResult = await this.electronAPI.invoke('llm-chat', { serverId, messages });
      console.log('‚úÖ Chat response received:', chatResult.response.substring(0, 50) + '...');
      console.log('‚úÖ Token usage:', chatResult.usage);
      
      // –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π
      const modelsResult = await this.electronAPI.invoke('llm-get-models', serverId);
      console.log('‚úÖ Models retrieved:', modelsResult.models.length, 'models');
      
      return true;
    } catch (error) {
      console.error('‚ùå LLM chat test failed:', error.message);
      return false;
    }
  }

  // –¢–µ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
  async testConfigUpdate() {
    console.log('\n‚öôÔ∏è Testing Config Update...');
    
    try {
      const updatedServer = {
        id: 'test-server',
        name: 'Updated Test Server',
        deployed: true,
        connected: true
      };
      
      const updateResult = await this.electronAPI.invoke('update-server', updatedServer);
      console.log('‚úÖ Server updated:', updateResult.success);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
      const status = await this.electronAPI.invoke('get-server-status', 'test-server');
      console.log('‚úÖ Updated server name:', status.name);
      
      return true;
    } catch (error) {
      console.error('‚ùå Config update test failed:', error.message);
      return false;
    }
  }

  // –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
  async runAllTests() {
    console.log('üöÄ Starting Full Integration Tests for Windows LLM Agent');
    console.log('=' .repeat(60));
    
    const tests = [
      { name: 'Basic IPC', fn: () => this.testBasicIPC() },
      { name: 'Server Operations', fn: () => this.testServerOperations() },
      { name: 'Server Deployment', fn: () => this.testServerDeployment() },
      { name: 'Full Server Setup', fn: () => this.testFullServerSetup() },
      { name: 'LLM Chat', fn: () => this.testLLMChat() },
      { name: 'Config Update', fn: () => this.testConfigUpdate() }
    ];
    
    let passed = 0;
    let failed = 0;
    
    for (const test of tests) {
      try {
        const result = await test.fn();
        if (result) {
          passed++;
          console.log(`‚úÖ ${test.name} - PASSED`);
        } else {
          failed++;
          console.log(`‚ùå ${test.name} - FAILED`);
        }
      } catch (error) {
        failed++;
        console.log(`‚ùå ${test.name} - ERROR:`, error.message);
      }
    }
    
    console.log('\n' + '=' .repeat(60));
    console.log(`üìä Test Results: ${passed} passed, ${failed} failed`);
    console.log(`üìà Success Rate: ${Math.round((passed / (passed + failed)) * 100)}%`);
    
    if (failed === 0) {
      console.log('üéâ All integration tests passed! System is ready for Stage 5 completion.');
    } else {
      console.log('‚ö†Ô∏è Some tests failed. Please review the issues before proceeding.');
    }
    
    return failed === 0;
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
async function main() {
  const tester = new FullIntegrationTest();
  const success = await tester.runAllTests();
  process.exit(success ? 0 : 1);
}

if (require.main === module) {
  main().catch(console.error);
}

module.exports = { FullIntegrationTest };
