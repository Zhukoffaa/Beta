const fs = require('fs');
const path = require('path');

class Stage8FullFunctionalTester {
    constructor() {
        this.results = [];
        this.passCount = 0;
        this.failCount = 0;
    }

    addTest(name, status, details = '') {
        this.results.push({ name, status, details });
        if (status === 'PASS') this.passCount++;
        else this.failCount++;
        
        const icon = status === 'PASS' ? '‚úÖ' : status === 'FAIL' ? '‚ùå' : '‚ö†Ô∏è';
        console.log(`${icon} ${name}: ${status}${details ? ` - ${details}` : ''}`);
    }

    // 1. –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ UI
    testUIFunctionality() {
        console.log('üé® Testing UI Functionality...');
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ FileTreePanel —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
        const fileTreePath = 'renderer/src/components/FileTreePanel.tsx';
        if (fs.existsSync(fileTreePath)) {
            const content = fs.readFileSync(fileTreePath, 'utf8');
            
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö UI —ç–ª–µ–º–µ–Ω—Ç–æ–≤
            if (content.includes('useState') && content.includes('useEffect')) {
                this.addTest('FileTreePanel React hooks', 'PASS');
            } else {
                this.addTest('FileTreePanel React hooks', 'FAIL');
            }
            
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
            if (content.includes('onClick') || content.includes('onSelect')) {
                this.addTest('FileTreePanel event handlers', 'PASS');
            } else {
                this.addTest('FileTreePanel event handlers', 'FAIL');
            }
            
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∏–ª–∏–∑–∞—Ü–∏–∏
            if (content.includes('className') && content.includes('hover:')) {
                this.addTest('FileTreePanel styling', 'PASS');
            } else {
                this.addTest('FileTreePanel styling', 'FAIL');
            }
        } else {
            this.addTest('FileTreePanel file exists', 'FAIL');
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ ServerSettingsWindow —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
        const serverWindowPath = 'renderer/src/components/ServerSettingsWindow.tsx';
        if (fs.existsSync(serverWindowPath)) {
            const content = fs.readFileSync(serverWindowPath, 'utf8');
            
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
            if (content.includes('modal') && content.includes('overlay')) {
                this.addTest('ServerSettingsWindow modal structure', 'PASS');
            } else {
                this.addTest('ServerSettingsWindow modal structure', 'FAIL');
            }
            
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º
            if (content.includes('input') && content.includes('button')) {
                this.addTest('ServerSettingsWindow form elements', 'PASS');
            } else {
                this.addTest('ServerSettingsWindow form elements', 'FAIL');
            }
            
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
            if (content.includes('validation') || content.includes('error')) {
                this.addTest('ServerSettingsWindow validation', 'PASS');
            } else {
                this.addTest('ServerSettingsWindow validation', 'WARN', 'No explicit validation found');
            }
        } else {
            this.addTest('ServerSettingsWindow file exists', 'FAIL');
        }
    }

    // 2. OCR —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    testOCRFunctionality() {
        console.log('üñºÔ∏è Testing OCR Functionality...');
        
        const ocrServicePath = 'backend/services/ocrService.ts';
        if (fs.existsSync(ocrServicePath)) {
            const content = fs.readFileSync(ocrServicePath, 'utf8');
            
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
            if (content.includes('processMultipleImages') && content.includes('Promise.all')) {
                this.addTest('OCR multiple images processing', 'PASS');
            } else {
                this.addTest('OCR multiple images processing', 'FAIL');
            }
            
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø–æ–ª–µ–π
            if (content.includes('parseServerFields') && content.includes('extractFields')) {
                this.addTest('OCR server fields parsing', 'PASS');
            } else {
                this.addTest('OCR server fields parsing', 'FAIL');
            }
            
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            if (content.includes('mergeResults') && content.includes('confidence')) {
                this.addTest('OCR results merging', 'PASS');
            } else {
                this.addTest('OCR results merging', 'FAIL');
            }
        } else {
            this.addTest('OCR Service file exists', 'FAIL');
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ ImageServerParser –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
        const imageParserPath = 'renderer/src/components/ImageServerParser.tsx';
        if (fs.existsSync(imageParserPath)) {
            const content = fs.readFileSync(imageParserPath, 'utf8');
            
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
            if (content.includes('multiple') && content.includes('files')) {
                this.addTest('ImageServerParser multiple upload', 'PASS');
            } else {
                this.addTest('ImageServerParser multiple upload', 'FAIL');
            }
            
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å OCR
            if (content.includes('ocr-process-images')) {
                this.addTest('ImageServerParser OCR integration', 'PASS');
            } else {
                this.addTest('ImageServerParser OCR integration', 'FAIL');
            }
        }
    }

    // 3. –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    testIntegration() {
        console.log('üîó Testing Integration...');
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ App.tsx –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
        const appPath = 'renderer/src/App.tsx';
        if (fs.existsSync(appPath)) {
            const content = fs.readFileSync(appPath, 'utf8');
            
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–æ–≤ –Ω–æ–≤—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
            if (content.includes('FileTreePanel') && content.includes('ServerSettingsWindow')) {
                this.addTest('App.tsx component imports', 'PASS');
            } else {
                this.addTest('App.tsx component imports', 'FAIL');
            }
            
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            if (content.includes('useState') && content.includes('showServerSettings')) {
                this.addTest('App.tsx state management', 'PASS');
            } else {
                this.addTest('App.tsx state management', 'FAIL');
            }
            
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
            if (content.includes('setActiveTab') || content.includes('handleTabChange')) {
                this.addTest('App.tsx navigation', 'PASS');
            } else {
                this.addTest('App.tsx navigation', 'WARN', 'Limited navigation found');
            }
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ IPC –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –≤ main.ts
        const mainPath = 'backend/main.ts';
        if (fs.existsSync(mainPath)) {
            const content = fs.readFileSync(mainPath, 'utf8');
            
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö IPC –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
            if (content.includes('scan-project') && content.includes('ocr-process-images')) {
                this.addTest('Main.ts new IPC handlers', 'PASS');
            } else {
                this.addTest('Main.ts new IPC handlers', 'FAIL');
            }
            
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤
            if (content.includes('OCRService') && content.includes('FileIndexer')) {
                this.addTest('Main.ts service integration', 'PASS');
            } else {
                this.addTest('Main.ts service integration', 'FAIL');
            }
        }
    }

    // 4. Performance —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    testPerformance() {
        console.log('‚ö° Testing Performance...');
        
        const fileIndexerPath = 'backend/services/fileIndexer.ts';
        if (fs.existsSync(fileIndexerPath)) {
            const content = fs.readFileSync(fileIndexerPath, 'utf8');
            
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è
            if (content.includes('cache') && content.includes('Map')) {
                this.addTest('FileIndexer caching mechanism', 'PASS');
            } else {
                this.addTest('FileIndexer caching mechanism', 'FAIL');
            }
            
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ—Å—Ç–∏
            if (content.includes('async') && content.includes('await')) {
                this.addTest('FileIndexer async operations', 'PASS');
            } else {
                this.addTest('FileIndexer async operations', 'FAIL');
            }
            
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
            if (content.includes('debounce') || content.includes('throttle')) {
                this.addTest('FileIndexer optimization', 'PASS');
            } else {
                this.addTest('FileIndexer optimization', 'WARN', 'No explicit optimization found');
            }
            
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ fs.watch –¥–ª—è —Ä–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            if (content.includes('fs.watch') || content.includes('chokidar')) {
                this.addTest('FileIndexer file watching', 'PASS');
            } else {
                this.addTest('FileIndexer file watching', 'FAIL');
            }
        }
    }

    // 5. E2E —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
    testE2EScenarios() {
        console.log('üéØ Testing E2E Scenarios...');
        
        // –°—Ü–µ–Ω–∞—Ä–∏–π 1: –í—ã–±–æ—Ä –ø—Ä–æ–µ–∫—Ç–∞
        const projectsConfigPath = 'configs/projects.json';
        if (fs.existsSync(projectsConfigPath)) {
            const content = fs.readFileSync(projectsConfigPath, 'utf8');
            try {
                const config = JSON.parse(content);
                if (config.projects && Array.isArray(config.projects)) {
                    this.addTest('E2E: Project selection config', 'PASS');
                } else {
                    this.addTest('E2E: Project selection config', 'FAIL');
                }
            } catch (e) {
                this.addTest('E2E: Project selection config', 'FAIL', 'Invalid JSON');
            }
        } else {
            this.addTest('E2E: Project selection config', 'FAIL');
        }
        
        // –°—Ü–µ–Ω–∞—Ä–∏–π 2: –§–∞–π–ª–æ–≤–æ–µ –¥–µ—Ä–µ–≤–æ -> –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ä–≤–µ—Ä–æ–≤
        const fileTreeExists = fs.existsSync('renderer/src/components/FileTreePanel.tsx');
        const serverSettingsExists = fs.existsSync('renderer/src/components/ServerSettingsWindow.tsx');
        
        if (fileTreeExists && serverSettingsExists) {
            this.addTest('E2E: FileTree to ServerSettings flow', 'PASS');
        } else {
            this.addTest('E2E: FileTree to ServerSettings flow', 'FAIL');
        }
        
        // –°—Ü–µ–Ω–∞—Ä–∏–π 3: OCR -> –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ–æ—Ä–º—ã
        const ocrExists = fs.existsSync('backend/services/ocrService.ts');
        const imageParserExists = fs.existsSync('renderer/src/components/ImageServerParser.tsx');
        
        if (ocrExists && imageParserExists) {
            this.addTest('E2E: OCR to form filling flow', 'PASS');
        } else {
            this.addTest('E2E: OCR to form filling flow', 'FAIL');
        }
        
        // –°—Ü–µ–Ω–∞—Ä–∏–π 4: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        const serversConfigExists = fs.existsSync('configs/servers.json');
        if (serversConfigExists) {
            this.addTest('E2E: Configuration persistence', 'PASS');
        } else {
            this.addTest('E2E: Configuration persistence', 'FAIL');
        }
    }

    // 6. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∏–ª–µ–π –∏ –∞–Ω–∏–º–∞—Ü–∏–π
    testStylesAndAnimations() {
        console.log('üé® Testing Styles and Animations...');
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ Tailwind –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        const tailwindPath = 'tailwind.config.js';
        if (fs.existsSync(tailwindPath)) {
            const content = fs.readFileSync(tailwindPath, 'utf8');
            
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–Ω–∏–º–∞—Ü–∏–π
            if (content.includes('animation') && content.includes('keyframes')) {
                this.addTest('Tailwind animations config', 'PASS');
            } else {
                this.addTest('Tailwind animations config', 'FAIL');
            }
            
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ —à—Ä–∏—Ñ—Ç–æ–≤
            if (content.includes('Inter') || content.includes('fontFamily')) {
                this.addTest('Tailwind fonts config', 'PASS');
            } else {
                this.addTest('Tailwind fonts config', 'FAIL');
            }
            
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ backdrop-blur (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–µ—É–¥–∞—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞)
            if (content.includes('backdrop-blur') || content.includes('backdropBlur')) {
                this.addTest('Tailwind backdrop-blur config', 'PASS');
            } else {
                this.addTest('Tailwind backdrop-blur config', 'FAIL');
            }
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ CSS —Ñ–∞–π–ª–∞
        const cssPath = 'renderer/src/App.css';
        if (fs.existsSync(cssPath)) {
            const content = fs.readFileSync(cssPath, 'utf8');
            
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ macOS —Å—Ç–∏–ª–µ–π
            if (content.includes('macOS') && content.includes('backdrop-filter')) {
                this.addTest('CSS macOS styles', 'PASS');
            } else {
                this.addTest('CSS macOS styles', 'FAIL');
            }
            
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–Ω–∏–º–∞—Ü–∏–π
            if (content.includes('@keyframes') && content.includes('transition')) {
                this.addTest('CSS animations', 'PASS');
            } else {
                this.addTest('CSS animations', 'FAIL');
            }
        }
    }

    // –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
    runAllTests() {
        console.log('üöÄ Starting Stage 8 Full Functional Testing...');
        console.log('============================================================\n');
        
        this.testUIFunctionality();
        console.log('');
        
        this.testOCRFunctionality();
        console.log('');
        
        this.testIntegration();
        console.log('');
        
        this.testPerformance();
        console.log('');
        
        this.testE2EScenarios();
        console.log('');
        
        this.testStylesAndAnimations();
        console.log('');
        
        this.generateReport();
    }

    generateReport() {
        const total = this.passCount + this.failCount;
        const successRate = ((this.passCount / total) * 100).toFixed(1);
        
        console.log('============================================================');
        console.log('üìä STAGE 8 FULL FUNCTIONAL TEST RESULTS');
        console.log('============================================================');
        console.log(`‚úÖ Passed: ${this.passCount}/${total} (${successRate}%)`);
        
        if (this.failCount > 0) {
            console.log(`‚ùå Failed: ${this.failCount}/${total}`);
            console.log('‚ö†Ô∏è Some tests failed. Review the issues above.');
        } else {
            console.log('üéâ All tests passed successfully!');
        }
        
        // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
        const report = {
            timestamp: new Date().toISOString(),
            summary: {
                total,
                passed: this.passCount,
                failed: this.failCount,
                successRate: `${successRate}%`
            },
            results: this.results
        };
        
        fs.writeFileSync('STAGE8_FULL_FUNCTIONAL_TEST_REPORT.json', JSON.stringify(report, null, 2));
        console.log('\nüìÑ Detailed report saved to: STAGE8_FULL_FUNCTIONAL_TEST_REPORT.json');
    }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
const tester = new Stage8FullFunctionalTester();
tester.runAllTests();
