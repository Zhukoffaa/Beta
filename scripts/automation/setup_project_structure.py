#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∫–∞—Ç–∞–ª–æ–≥–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞ Windows LLM Agent
"""

import os
import json
import yaml
from pathlib import Path

def create_directory_structure():
    """–°–æ–∑–¥–∞–µ—Ç –±–∞–∑–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∫–∞—Ç–∞–ª–æ–≥–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞"""
    
    # –ë–∞–∑–æ–≤—ã–µ –∫–∞—Ç–∞–ª–æ–≥–∏
    directories = [
        "backend",
        "backend/services", 
        "renderer",
        "renderer/components",
        "renderer/hooks",
        "tasks",
        "tools", 
        "configs",
        "logs",
        "tests",
        "tests/unit",
        "tests/integration",
        "dist",
        "build"
    ]
    
    print("üèóÔ∏è  –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∫–∞—Ç–∞–ª–æ–≥–æ–≤...")
    
    for directory in directories:
        dir_path = Path(directory)
        dir_path.mkdir(parents=True, exist_ok=True)
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω –∫–∞—Ç–∞–ª–æ–≥: {directory}")
    
    print(f"\nüìÅ –°–æ–∑–¥–∞–Ω–æ {len(directories)} –∫–∞—Ç–∞–ª–æ–≥–æ–≤")

def create_config_files():
    """–°–æ–∑–¥–∞–µ—Ç –±–∞–∑–æ–≤—ã–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã"""
    
    print("\n‚öôÔ∏è  –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤...")
    
    # app.yaml
    app_config = {
        'app': {
            'name': 'Windows LLM Agent',
            'version': '1.0.0-beta',
            'debug': False,
            'logLevel': 'info',
            'theme': 'dark',
            'language': 'ru'
        },
        'timeouts': {
            'ssh': 30000,
            'llm': 60000,
            'deploy': 300000,
            'health_check': 10000
        },
        'paths': {
            'logs': './logs',
            'tools': './tools',
            'configs': './configs'
        },
        'ui': {
            'window': {
                'width': 1200,
                'height': 800,
                'minWidth': 800,
                'minHeight': 600
            },
            'devTools': False
        }
    }
    
    with open('configs/app.yaml', 'w', encoding='utf-8') as f:
        yaml.dump(app_config, f, default_flow_style=False, allow_unicode=True)
    print("‚úÖ –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª: configs/app.yaml")
    
    # servers.json
    servers_config = {
        "servers": [
            {
                "id": "example-server",
                "name": "Example LLM Server",
                "host": "192.168.1.100",
                "port": 22,
                "user": "admin",
                "sshKey": "",
                "deployPath": "/opt/llm",
                "llmPort": 8080,
                "status": "disconnected",
                "deployed": False,
                "connected": False,
                "lastCheck": None,
                "projectPath": "/home/admin/llm-project"
            }
        ],
        "activeServer": None,
        "lastUpdated": None
    }
    
    with open('configs/servers.json', 'w', encoding='utf-8') as f:
        json.dump(servers_config, f, indent=2, ensure_ascii=False)
    print("‚úÖ –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª: configs/servers.json")

def create_package_json():
    """–°–æ–∑–¥–∞–µ—Ç package.json –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞"""
    
    print("\nüì¶ –°–æ–∑–¥–∞–Ω–∏–µ package.json...")
    
    package_config = {
        "name": "windows-llm-agent",
        "version": "1.0.0-beta",
        "description": "Windows –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ-–∞–≥–µ–Ω—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–Ω—ã–º–∏ LLM —Å–µ—Ä–≤–µ—Ä–∞–º–∏",
        "main": "backend/main.js",
        "homepage": "./",
        "scripts": {
            "dev": "concurrently \"npm run dev:backend\" \"npm run dev:renderer\"",
            "dev:backend": "tsc -w --project backend/tsconfig.json",
            "dev:renderer": "webpack serve --config renderer/webpack.config.js",
            "build": "npm run build:backend && npm run build:renderer",
            "build:backend": "tsc --project backend/tsconfig.json",
            "build:renderer": "webpack --config renderer/webpack.config.js --mode production",
            "electron": "electron .",
            "electron:dev": "electron . --dev",
            "dist": "electron-builder",
            "dist:win": "electron-builder --win",
            "test": "jest",
            "test:watch": "jest --watch",
            "lint": "eslint . --ext .ts,.tsx",
            "lint:fix": "eslint . --ext .ts,.tsx --fix"
        },
        "keywords": [
            "electron",
            "llm",
            "ssh",
            "agent",
            "windows"
        ],
        "author": "LLM Agent Team",
        "license": "MIT",
        "devDependencies": {
            "@types/node": "^20.0.0",
            "@types/react": "^18.0.0",
            "@types/react-dom": "^18.0.0",
            "@typescript-eslint/eslint-plugin": "^6.0.0",
            "@typescript-eslint/parser": "^6.0.0",
            "concurrently": "^8.0.0",
            "electron": "^27.0.0",
            "electron-builder": "^24.0.0",
            "eslint": "^8.0.0",
            "eslint-plugin-react": "^7.0.0",
            "jest": "^29.0.0",
            "typescript": "^5.0.0",
            "webpack": "^5.0.0",
            "webpack-cli": "^5.0.0",
            "webpack-dev-server": "^4.0.0"
        },
        "dependencies": {
            "react": "^18.0.0",
            "react-dom": "^18.0.0",
            "ssh2": "^1.15.0",
            "yaml": "^2.3.0",
            "axios": "^1.6.0",
            "monaco-editor": "^0.44.0",
            "diff2html": "^3.4.0"
        },
        "build": {
            "appId": "com.llmagent.windows",
            "productName": "Windows LLM Agent",
            "directories": {
                "output": "dist"
            },
            "files": [
                "backend/**/*",
                "renderer/dist/**/*",
                "tools/**/*",
                "configs/**/*",
                "package.json"
            ],
            "extraResources": [
                {
                    "from": "tools/",
                    "to": "tools/"
                },
                {
                    "from": "configs/",
                    "to": "configs/"
                }
            ],
            "win": {
                "target": "nsis",
                "icon": "assets/icon.ico"
            },
            "nsis": {
                "oneClick": False,
                "allowToChangeInstallationDirectory": True
            }
        }
    }
    
    with open('package.json', 'w', encoding='utf-8') as f:
        json.dump(package_config, f, indent=2, ensure_ascii=False)
    print("‚úÖ –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª: package.json")

def create_gitignore():
    """–°–æ–∑–¥–∞–µ—Ç .gitignore —Ñ–∞–π–ª"""
    
    print("\nüö´ –°–æ–∑–¥–∞–Ω–∏–µ .gitignore...")
    
    gitignore_content = """# Dependencies
node_modules/
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# Build outputs
dist/
build/
*.js
*.js.map
!webpack.config.js
!jest.config.js

# Logs
logs/*.log
*.log

# Runtime data
pids
*.pid
*.seed
*.pid.lock

# Coverage directory used by tools like istanbul
coverage/

# nyc test coverage
.nyc_output

# Dependency directories
node_modules/
jspm_packages/

# Optional npm cache directory
.npm

# Optional REPL history
.node_repl_history

# Output of 'npm pack'
*.tgz

# Yarn Integrity file
.yarn-integrity

# dotenv environment variables file
.env

# IDE files
.vscode/
.idea/
*.swp
*.swo
*~

# OS generated files
.DS_Store
.DS_Store?
._*
.Spotlight-V100
.Trashes
ehthumbs.db
Thumbs.db

# Electron
out/
dist_electron/

# Local configuration overrides
configs/local.*
configs/*.local.*

# SSH keys (security)
*.pem
*.key
id_rsa*

# Temporary files
tmp/
temp/
*.tmp
"""
    
    with open('.gitignore', 'w', encoding='utf-8') as f:
        f.write(gitignore_content)
    print("‚úÖ –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª: .gitignore")

def create_typescript_configs():
    """–°–æ–∑–¥–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã TypeScript"""
    
    print("\nüìù –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π TypeScript...")
    
    # –û—Å–Ω–æ–≤–Ω–æ–π tsconfig.json
    main_tsconfig = {
        "compilerOptions": {
            "target": "ES2020",
            "module": "commonjs",
            "lib": ["ES2020", "DOM"],
            "outDir": "./dist",
            "rootDir": "./",
            "strict": True,
            "esModuleInterop": True,
            "skipLibCheck": True,
            "forceConsistentCasingInFileNames": True,
            "resolveJsonModule": True,
            "declaration": True,
            "declarationMap": True,
            "sourceMap": True
        },
        "include": [
            "backend/**/*",
            "tasks/**/*"
        ],
        "exclude": [
            "node_modules",
            "dist",
            "renderer"
        ]
    }
    
    with open('tsconfig.json', 'w', encoding='utf-8') as f:
        json.dump(main_tsconfig, f, indent=2)
    print("‚úÖ –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª: tsconfig.json")
    
    # Backend tsconfig
    backend_tsconfig = {
        "extends": "../tsconfig.json",
        "compilerOptions": {
            "outDir": "../dist/backend",
            "rootDir": "."
        },
        "include": [
            "**/*"
        ]
    }
    
    with open('backend/tsconfig.json', 'w', encoding='utf-8') as f:
        json.dump(backend_tsconfig, f, indent=2)
    print("‚úÖ –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª: backend/tsconfig.json")

def create_readme_files():
    """–°–æ–∑–¥–∞–µ—Ç README —Ñ–∞–π–ª—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–∞—Ç–∞–ª–æ–≥–∞"""
    
    print("\nüìñ –°–æ–∑–¥–∞–Ω–∏–µ README —Ñ–∞–π–ª–æ–≤...")
    
    readme_contents = {
        "backend/README.md": """# Backend Services

–≠—Ç–æ—Ç –∫–∞—Ç–∞–ª–æ–≥ —Å–æ–¥–µ—Ä–∂–∏—Ç backend —Å–ª—É–∂–±—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:

- `main.ts` - —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ Electron –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
- `services/` - –æ—Å–Ω–æ–≤–Ω—ã–µ —Å–ª—É–∂–±—ã (SSH, LLM, Config, Logger, etc.)

## –°—Ç—Ä—É–∫—Ç—É—Ä–∞

- `services/logger.ts` - —Å–∏—Å—Ç–µ–º–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
- `services/config.ts` - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è–º–∏  
- `services/sshService.ts` - SSH/SFTP –æ–ø–µ—Ä–∞—Ü–∏–∏
- `services/llmService.ts` - HTTP –∫–ª–∏–µ–Ω—Ç –¥–ª—è LLM API
- `services/taskExecutor.ts` - –º–µ–Ω–µ–¥–∂–µ—Ä worker –ø–æ—Ç–æ–∫–æ–≤
- `services/serverManager.ts` - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞–º–∏
""",
        
        "renderer/README.md": """# Frontend UI

React –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞:

- `App.tsx` - –≥–ª–∞–≤–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
- `components/` - UI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
- `hooks/` - React —Ö—É–∫–∏ –¥–ª—è IPC

## –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã

- `Chat.tsx` - –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —á–∞—Ç–∞ —Å LLM
- `CodeEditor.tsx` - Monaco Editor
- `DiffViewer.tsx` - –ø—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞–∑–ª–∏—á–∏–π
- `FileExplorer.tsx` - —Ñ–∞–π–ª–æ–≤—ã–π –ø—Ä–æ–≤–æ–¥–Ω–∏–∫
- `ServersPanel.tsx` - –ø–∞–Ω–µ–ª—å —Å–µ—Ä–≤–µ—Ä–æ–≤
- `SettingsDialog.tsx` - –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
""",
        
        "tasks/README.md": """# Worker Tasks

–ó–∞–¥–∞—á–∏, –≤—ã–ø–æ–ª–Ω—è–µ–º—ã–µ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–∞—Ö:

- `deployTask.ts` - —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ LLM —Å–µ—Ä–≤–µ—Ä–∞
- `connectTask.ts` - –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∏ —Ç—É–Ω–Ω–µ–ª–∏
- `chatTask.ts` - –æ–±—Ä–∞–±–æ—Ç–∫–∞ —á–∞—Ç –∑–∞–ø—Ä–æ—Å–æ–≤

–í—Å–µ –∑–∞–¥–∞—á–∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç JSONL —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏.
""",
        
        "tools/README.md": """# Tools

–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Å–∫—Ä–∏–ø—Ç—ã –∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã:

- `deploy_llm_server.py` - —Å–∫—Ä–∏–ø—Ç —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è LLM
- –î—Ä—É–≥–∏–µ —É—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–µ—Ä–≤–µ—Ä–∞–º–∏

–≠—Ç–∏ —Ñ–∞–π–ª—ã –∫–æ–ø–∏—Ä—É—é—Ç—Å—è –Ω–∞ —É–¥–∞–ª–µ–Ω–Ω—ã–µ —Å–µ—Ä–≤–µ—Ä—ã.
""",
        
        "configs/README.md": """# Configurations

–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:

- `app.yaml` - –æ—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
- `servers.json` - –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–µ—Ä–≤–µ—Ä–æ–≤

–§–∞–π–ª—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞—é—Ç—Å—è –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ.
"""
    }
    
    for file_path, content in readme_contents.items():
        with open(file_path, 'w', encoding='utf-8') as f:
            f.write(content)
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª: {file_path}")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–∫—Ä–∏–ø—Ç–∞"""
    
    print("üöÄ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞ Windows LLM Agent")
    print("=" * 50)
    
    try:
        create_directory_structure()
        create_config_files()
        create_package_json()
        create_gitignore()
        create_typescript_configs()
        create_readme_files()
        
        print("\n" + "=" * 50)
        print("‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!")
        print("\nüìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
        print("1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: npm install")
        print("2. –ù–∞—á–Ω–∏—Ç–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫—É —Å –≠—Ç–∞–ø–∞ 1 –∏–∑ PROJECT_MASTER_CHECKLIST.md")
        print("3. –°–æ–∑–¥–∞–π—Ç–µ –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ–∞–π–ª—ã backend –∏ frontend")
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã: {e}")
        return 1
    
    return 0

if __name__ == "__main__":
    exit(main())
