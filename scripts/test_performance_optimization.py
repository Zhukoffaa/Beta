#!/usr/bin/env python3

import os
import sys
import json
import subprocess
import time
from pathlib import Path

class PerformanceOptimizationTester:
    def __init__(self):
        self.project_root = Path(__file__).parent.parent
        self.test_results = {
            'app_optimization': False,
            'memo_usage': False,
            'callback_usage': False,
            'debounce_implementation': False,
            'loading_states': False,
            'build_performance': False
        }
        
    def test_app_optimization(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ App.tsx"""
        print("‚ö° –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ App.tsx...")
        
        app_file = self.project_root / 'renderer' / 'src' / 'App.tsx'
        if not app_file.exists():
            print("‚ùå App.tsx –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
            
        with open(app_file, 'r', encoding='utf-8') as f:
            app_content = f.read()
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
        required_optimizations = [
            'useCallback',
            'useMemo',
            'memo',
            'useDebounce',
            'isLoading',
            'isFileLoading',
            'debouncedFileContent',
            'AppHeader = memo',
            'TabNavigation = memo'
        ]
        
        missing_optimizations = []
        for optimization in required_optimizations:
            if optimization not in app_content:
                missing_optimizations.append(optimization)
                
        if missing_optimizations:
            print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏: {missing_optimizations}")
            return False
            
        print("‚úÖ App.tsx –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        return True
        
    def test_memo_usage(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è React.memo"""
        print("üß† –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è React.memo...")
        
        app_file = self.project_root / 'renderer' / 'src' / 'App.tsx'
        with open(app_file, 'r', encoding='utf-8') as f:
            content = f.read()
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ–º–æ–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        memo_components = [
            'AppHeader = memo',
            'TabNavigation = memo'
        ]
        
        memo_props = [
            'fileTreeProps = useMemo',
            'chatProps = useMemo',
            'settingsProps = useMemo'
        ]
        
        missing_memo = []
        for component in memo_components + memo_props:
            if component not in content:
                missing_memo.append(component)
                
        if missing_memo:
            print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç memo –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏: {missing_memo}")
            return False
            
        print("‚úÖ React.memo –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        return True
        
    def test_callback_usage(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è useCallback"""
        print("üîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è useCallback...")
        
        app_file = self.project_root / 'renderer' / 'src' / 'App.tsx'
        with open(app_file, 'r', encoding='utf-8') as f:
            content = f.read()
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º useCallback —Ñ—É–Ω–∫—Ü–∏–∏
        callback_functions = [
            'loadLLMSettings = useCallback',
            'handleLLMSettingsChange = useCallback',
            'handleFileSelect = useCallback',
            'handleOpenServerSettings = useCallback',
            'handleTabChange = useCallback',
            'getLanguageFromFile = useCallback'
        ]
        
        missing_callbacks = []
        for callback in callback_functions:
            if callback not in content:
                missing_callbacks.append(callback)
                
        if missing_callbacks:
            print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç useCallback –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏: {missing_callbacks}")
            return False
            
        print("‚úÖ useCallback –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        return True
        
    def test_debounce_implementation(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ debounce"""
        print("‚è±Ô∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ debounce —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏...")
        
        app_file = self.project_root / 'renderer' / 'src' / 'App.tsx'
        with open(app_file, 'r', encoding='utf-8') as f:
            content = f.read()
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º debounce —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å
        debounce_features = [
            'useDebounce',
            'debouncedValue',
            'setTimeout',
            'clearTimeout',
            'debouncedFileContent = useDebounce(fileContent, 300)'
        ]
        
        missing_debounce = []
        for feature in debounce_features:
            if feature not in content:
                missing_debounce.append(feature)
                
        if missing_debounce:
            print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç debounce —Ñ—É–Ω–∫—Ü–∏–∏: {missing_debounce}")
            return False
            
        print("‚úÖ Debounce —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        return True
        
    def test_loading_states(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ loading —Å–æ—Å—Ç–æ—è–Ω–∏–π"""
        print("üîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ loading —Å–æ—Å—Ç–æ—è–Ω–∏–π...")
        
        app_file = self.project_root / 'renderer' / 'src' / 'App.tsx'
        with open(app_file, 'r', encoding='utf-8') as f:
            content = f.read()
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º loading —Å–æ—Å—Ç–æ—è–Ω–∏—è
        loading_features = [
            'isLoading',
            'isFileLoading',
            'setIsLoading',
            'setIsFileLoading',
            'animate-spin',
            '–ó–∞–≥—Ä—É–∑–∫–∞...',
            'disabled={isLoading}'
        ]
        
        missing_loading = []
        for feature in loading_features:
            if feature not in content:
                missing_loading.append(feature)
                
        if missing_loading:
            print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç loading —Å–æ—Å—Ç–æ—è–Ω–∏—è: {missing_loading}")
            return False
            
        print("‚úÖ Loading —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        return True
        
    def test_build_performance(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–±–æ—Ä–∫–∏"""
        print("üèóÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–±–æ—Ä–∫–∏...")
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è —Å–±–æ—Ä–∫–∏
            start_time = time.time()
            
            result = subprocess.run(['cmd', '/c', 'npm', 'run', 'build:renderer'], 
                                  cwd=self.project_root, 
                                  capture_output=True, 
                                  text=True,
                                  shell=True,
                                  timeout=120)  # 2 –º–∏–Ω—É—Ç—ã –º–∞–∫—Å–∏–º—É–º
            
            build_time = time.time() - start_time
            
            if result.returncode != 0:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Å–±–æ—Ä–∫–∏: {result.stderr}")
                return False
                
            print(f"‚úÖ –°–±–æ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ {build_time:.2f} —Å–µ–∫—É–Ω–¥")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä bundle
            dist_folder = self.project_root / 'renderer' / 'dist'
            if dist_folder.exists():
                total_size = sum(f.stat().st_size for f in dist_folder.rglob('*') if f.is_file())
                size_mb = total_size / (1024 * 1024)
                print(f"üì¶ –†–∞–∑–º–µ—Ä bundle: {size_mb:.2f} MB")
                
                if size_mb > 50:  # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –µ—Å–ª–∏ –±–æ–ª—å—à–µ 50MB
                    print("‚ö†Ô∏è Bundle —Ä–∞–∑–º–µ—Ä –±–æ–ª—å—à–µ 50MB, —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è")
                    
            return True
            
        except subprocess.TimeoutExpired:
            print("‚ùå –°–±–æ—Ä–∫–∞ –ø—Ä–µ–≤—ã—Å–∏–ª–∞ –ª–∏–º–∏—Ç –≤—Ä–µ–º–µ–Ω–∏ (2 –º–∏–Ω—É—Ç—ã)")
            return False
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–±–æ—Ä–∫–∏: {e}")
            return False
            
    def run_all_tests(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏...")
        print("=" * 70)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
        self.test_results['app_optimization'] = self.test_app_optimization()
        self.test_results['memo_usage'] = self.test_memo_usage()
        self.test_results['callback_usage'] = self.test_callback_usage()
        self.test_results['debounce_implementation'] = self.test_debounce_implementation()
        self.test_results['loading_states'] = self.test_loading_states()
        self.test_results['build_performance'] = self.test_build_performance()
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
        print("\n" + "=" * 70)
        print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò:")
        print("=" * 70)
        
        total_tests = len(self.test_results)
        passed_tests = sum(self.test_results.values())
        
        for test_name, result in self.test_results.items():
            status = "‚úÖ –ü–†–û–ô–î–ï–ù" if result else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
            print(f"{test_name.replace('_', ' ').title()}: {status}")
            
        print("=" * 70)
        print(f"–û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {passed_tests}/{total_tests} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
        success_rate = (passed_tests / total_tests) * 100
        print(f"–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏: {success_rate:.1f}%")
        
        if passed_tests == total_tests:
            print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò –ü–†–û–ô–î–ï–ù–´!")
            print("‚ö° –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –æ—Ç–∑—ã–≤—á–∏–≤–æ—Å—Ç–∏!")
            return True
        else:
            print("‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø—Ä–æ–≤–∞–ª–µ–Ω—ã.")
            print("üîß –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è.")
            return False
            
    def generate_performance_report(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        report = {
            'timestamp': time.strftime('%Y-%m-%d %H:%M:%S'),
            'test_results': self.test_results,
            'summary': {
                'total_tests': len(self.test_results),
                'passed_tests': sum(self.test_results.values()),
                'success_rate': sum(self.test_results.values()) / len(self.test_results) * 100
            },
            'optimizations_applied': [
                'React.memo –¥–ª—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤',
                'useCallback –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–π',
                'useMemo –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏–π',
                'useDebounce –¥–ª—è –≤–≤–æ–¥–∞',
                'Loading —Å–æ—Å—Ç–æ—è–Ω–∏—è',
                '–ú–µ–º–æ–∏–∑–∞—Ü–∏—è –ø—Ä–æ–ø—Å–æ–≤'
            ],
            'performance_metrics': {
                'debounce_delay': '300ms',
                'loading_timeout': '150ms –¥–ª—è —Ñ–∞–π–ª–æ–≤, 500ms –¥–ª—è —Å–µ—Ä–≤–µ—Ä–æ–≤',
                'memo_components': ['AppHeader', 'TabNavigation'],
                'callback_functions': 6,
                'memoized_props': 3
            }
        }
        
        report_file = self.project_root / 'PERFORMANCE_OPTIMIZATION_REPORT.json'
        with open(report_file, 'w', encoding='utf-8') as f:
            json.dump(report, f, indent=2, ensure_ascii=False)
            
        print(f"\nüìÑ –û—Ç—á–µ—Ç –æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {report_file}")

if __name__ == "__main__":
    tester = PerformanceOptimizationTester()
    success = tester.run_all_tests()
    tester.generate_performance_report()
    
    sys.exit(0 if success else 1)
