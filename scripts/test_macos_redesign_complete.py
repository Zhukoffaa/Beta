#!/usr/bin/env python3

import os
import sys
import json
import subprocess
import time
from pathlib import Path

class MacOSRedesignTester:
    def __init__(self):
        self.project_root = Path(__file__).parent.parent
        self.test_results = {
            'css_styles': False,
            'app_component': False,
            'tailwind_config': False,
            'backend_support': False,
            'build_success': False,
            'electron_launch': False
        }
        
    def test_css_styles(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ CSS —Å—Ç–∏–ª–µ–π –≤ —Å—Ç–∏–ª–µ macOS"""
        print("üé® –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ CSS —Å—Ç–∏–ª–µ–π macOS...")
        
        css_file = self.project_root / 'renderer' / 'src' / 'App.css'
        if not css_file.exists():
            print("‚ùå App.css –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
            
        with open(css_file, 'r', encoding='utf-8') as f:
            css_content = f.read()
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ macOS —Å—Ç–∏–ª–∏
        required_styles = [
            'backdrop-filter: blur',
            '-webkit-backdrop-filter: blur',
            'rgba(28, 28, 30',
            'cubic-bezier(0.25, 0.46, 0.45, 0.94)',
            '.app-header',
            '.sidebar',
            '.chat-panel',
            '.macos-dark-surface'
        ]
        
        missing_styles = []
        for style in required_styles:
            if style not in css_content:
                missing_styles.append(style)
                
        if missing_styles:
            print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Å—Ç–∏–ª–∏: {missing_styles}")
            return False
            
        print("‚úÖ CSS —Å—Ç–∏–ª–∏ macOS –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã")
        return True
        
    def test_app_component(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ App.tsx"""
        print("‚öõÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ App.tsx –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞...")
        
        app_file = self.project_root / 'renderer' / 'src' / 'App.tsx'
        if not app_file.exists():
            print("‚ùå App.tsx –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
            
        with open(app_file, 'r', encoding='utf-8') as f:
            app_content = f.read()
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
        required_features = [
            "type TabType = 'editor'",
            "CodeEditor",
            "handleOpenServerSettings",
            "getLanguageFromFile",
            "LLMSettings",
            "electron-drag",
            "electron-no-drag"
        ]
        
        missing_features = []
        for feature in required_features:
            if feature not in app_content:
                missing_features.append(feature)
                
        if missing_features:
            print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ñ—É–Ω–∫—Ü–∏–∏: {missing_features}")
            return False
            
        print("‚úÖ App.tsx –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –æ–±–Ω–æ–≤–ª–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        return True
        
    def test_tailwind_config(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Tailwind"""
        print("üé® –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Tailwind –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
        
        config_file = self.project_root / 'tailwind.config.js'
        if not config_file.exists():
            print("‚ùå tailwind.config.js –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
            
        with open(config_file, 'r', encoding='utf-8') as f:
            config_content = f.read()
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º macOS –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        required_config = [
            "San Francisco",
            "SF Pro Display",
            "macos:",
            "accent:",
            "cubic-bezier",
            "backdropBlur",
            "fadeIn",
            "slideUp"
        ]
        
        missing_config = []
        for config in required_config:
            if config not in config_content:
                missing_config.append(config)
                
        if missing_config:
            print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: {missing_config}")
            return False
            
        print("‚úÖ Tailwind –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è macOS –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
        return True
        
    def test_backend_support(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ backend"""
        print("üîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ backend –ø–æ–¥–¥–µ—Ä–∂–∫–∏...")
        
        main_file = self.project_root / 'backend' / 'main.ts'
        if not main_file.exists():
            print("‚ùå backend/main.ts –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
            
        with open(main_file, 'r', encoding='utf-8') as f:
            main_content = f.read()
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ —Å–µ—Ä–≤–µ—Ä–æ–≤
        required_backend = [
            "serverSettingsWindow",
            "openServerSettingsWindow",
            "open-server-settings",
            "close-server-settings",
            "modal: false",
            "frame: true"
        ]
        
        missing_backend = []
        for backend in required_backend:
            if backend not in main_content:
                missing_backend.append(backend)
                
        if missing_backend:
            print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç backend —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å: {missing_backend}")
            return False
            
        print("‚úÖ Backend –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
        return True
        
    def test_build(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–±–æ—Ä–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞"""
        print("üî® –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–±–æ—Ä–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞...")
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º package.json
            package_file = self.project_root / 'package.json'
            if not package_file.exists():
                print("‚ùå package.json –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return False
                
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            node_modules = self.project_root / 'node_modules'
            if not node_modules.exists():
                print("üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")
                result = subprocess.run(['cmd', '/c', 'npm', 'install'], 
                                      cwd=self.project_root, 
                                      capture_output=True, 
                                      text=True,
                                      shell=True)
                if result.returncode != 0:
                    print(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π: {result.stderr}")
                    return False
                    
            # –°–±–æ—Ä–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞
            print("üî® –°–±–æ—Ä–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞...")
            result = subprocess.run(['cmd', '/c', 'npm', 'run', 'build'], 
                                  cwd=self.project_root, 
                                  capture_output=True, 
                                  text=True,
                                  shell=True)
            
            if result.returncode != 0:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Å–±–æ—Ä–∫–∏: {result.stderr}")
                return False
                
            print("‚úÖ –°–±–æ—Ä–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞ —É—Å–ø–µ—à–Ω–∞")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–∫–µ: {e}")
            return False
            
    def test_electron_launch(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ Electron"""
        print("‚ö° –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ Electron...")
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ dist –ø–∞–ø–∫–∏
            dist_folder = self.project_root / 'dist'
            if not dist_folder.exists():
                print("‚ùå –ü–∞–ø–∫–∞ dist –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, —Å–±–æ—Ä–∫–∞ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")
                return False
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ–∞–π–ª—ã —Å–±–æ—Ä–∫–∏
            main_js = dist_folder / 'main.js'
            if not main_js.exists():
                print("‚ùå main.js –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–∞–ø–∫–µ dist")
                return False
                
            print("‚úÖ –§–∞–π–ª—ã —Å–±–æ—Ä–∫–∏ –Ω–∞–π–¥–µ–Ω—ã")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º Electron –≤ —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ —Å —Ç–∞–π–º–∞—É—Ç–æ–º
            process = subprocess.Popen(['cmd', '/c', 'npm', 'start'], 
                                     cwd=self.project_root,
                                     stdout=subprocess.PIPE,
                                     stderr=subprocess.PIPE,
                                     text=True,
                                     shell=True)
            
            # –ñ–¥–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥ –¥–ª—è –∑–∞–ø—É—Å–∫–∞
            time.sleep(3)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–ø—É—â–µ–Ω
            if process.poll() is None:
                print("‚úÖ Electron –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ")
                process.terminate()
                try:
                    process.wait(timeout=3)
                except subprocess.TimeoutExpired:
                    process.kill()
                return True
            else:
                stdout, stderr = process.communicate()
                print(f"‚ùå Electron –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è: {stderr}")
                return False
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Electron: {e}")
            return False
            
    def run_all_tests(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
        print("üöÄ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è macOS —Ä–µ–¥–∏–∑–∞–π–Ω–∞...")
        print("=" * 60)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
        self.test_results['css_styles'] = self.test_css_styles()
        self.test_results['app_component'] = self.test_app_component()
        self.test_results['tailwind_config'] = self.test_tailwind_config()
        self.test_results['backend_support'] = self.test_backend_support()
        self.test_results['build_success'] = self.test_build()
        self.test_results['electron_launch'] = self.test_electron_launch()
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
        print("\n" + "=" * 60)
        print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
        print("=" * 60)
        
        total_tests = len(self.test_results)
        passed_tests = sum(self.test_results.values())
        
        for test_name, result in self.test_results.items():
            status = "‚úÖ –ü–†–û–ô–î–ï–ù" if result else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
            print(f"{test_name.replace('_', ' ').title()}: {status}")
            
        print("=" * 60)
        print(f"–û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {passed_tests}/{total_tests} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
        
        if passed_tests == total_tests:
            print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´! macOS —Ä–µ–¥–∏–∑–∞–π–Ω –≥–æ—Ç–æ–≤!")
            return True
        else:
            print("‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–µ–Ω—ã. –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞.")
            return False
            
    def generate_report(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞"""
        report = {
            'timestamp': time.strftime('%Y-%m-%d %H:%M:%S'),
            'test_results': self.test_results,
            'summary': {
                'total_tests': len(self.test_results),
                'passed_tests': sum(self.test_results.values()),
                'success_rate': sum(self.test_results.values()) / len(self.test_results) * 100
            }
        }
        
        report_file = self.project_root / 'MACOS_REDESIGN_TEST_REPORT.json'
        with open(report_file, 'w', encoding='utf-8') as f:
            json.dump(report, f, indent=2, ensure_ascii=False)
            
        print(f"\nüìÑ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {report_file}")

if __name__ == "__main__":
    tester = MacOSRedesignTester()
    success = tester.run_all_tests()
    tester.generate_report()
    
    sys.exit(0 if success else 1)
