#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–±–æ—Ä–∫–∏ –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Windows LLM Agent
"""

import os
import sys
import shutil
import subprocess
import json
from pathlib import Path

def run_command(command, cwd=None):
    """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã —Å –≤—ã–≤–æ–¥–æ–º"""
    print(f"üîß –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ: {command}")
    try:
        result = subprocess.run(
            command,
            shell=True,
            cwd=cwd,
            capture_output=True,
            text=True,
            check=True
        )
        if result.stdout:
            print(f"‚úÖ {result.stdout}")
        return True
    except subprocess.CalledProcessError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        if e.stdout:
            print(f"STDOUT: {e.stdout}")
        if e.stderr:
            print(f"STDERR: {e.stderr}")
        return False

def create_directories():
    """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∫–∞—Ç–∞–ª–æ–≥–æ–≤"""
    print("üìÅ –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ç–∞–ª–æ–≥–æ–≤...")
    
    directories = [
        "dist",
        "dist/backend",
        "dist/backend/services"
    ]
    
    for directory in directories:
        Path(directory).mkdir(parents=True, exist_ok=True)
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω –∫–∞—Ç–∞–ª–æ–≥: {directory}")

def compile_typescript():
    """–ö–æ–º–ø–∏–ª—è—Ü–∏—è TypeScript —Ñ–∞–π–ª–æ–≤"""
    print("üî® –ö–æ–º–ø–∏–ª—è—Ü–∏—è TypeScript...")
    
    # –ö–æ–º–ø–∏–ª—è—Ü–∏—è –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    ts_files = [
        "backend/services/logger.ts",
        "backend/services/config.ts", 
        "backend/services/serverManager.ts",
        "backend/main.ts"
    ]
    
    for ts_file in ts_files:
        if os.path.exists(ts_file):
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª
            js_file = ts_file.replace('.ts', '.js').replace('backend/', 'dist/backend/')
            
            # –ö–æ–º–ø–∏–ª—è—Ü–∏—è
            cmd = f"npx tsc {ts_file} --outDir dist/backend --target ES2020 --module commonjs --esModuleInterop --skipLibCheck --resolveJsonModule --moduleResolution node"
            if not run_command(cmd):
                return False
            
            print(f"‚úÖ –°–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞–Ω: {ts_file} -> {js_file}")
        else:
            print(f"‚ö†Ô∏è  –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {ts_file}")
    
    return True

def copy_static_files():
    """–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤"""
    print("üìã –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤...")
    
    # –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ preload.js
    if os.path.exists("backend/preload.js"):
        shutil.copy2("backend/preload.js", "dist/backend/preload.js")
        print("‚úÖ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω: preload.js")
    
    return True

def build_renderer():
    """–°–±–æ—Ä–∫–∞ renderer —á–∞—Å—Ç–∏"""
    print("üé® –°–±–æ—Ä–∫–∞ renderer...")
    
    return run_command("npm run build:renderer")

def test_build():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–±–æ—Ä–∫–∏"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–±–æ—Ä–∫–∏...")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    required_files = [
        "dist/backend/main.js",
        "dist/backend/preload.js",
        "dist/backend/services/logger.js",
        "dist/backend/services/config.js",
        "dist/backend/services/serverManager.js",
        "renderer/dist/bundle.js",
        "renderer/dist/index.html"
    ]
    
    missing_files = []
    for file_path in required_files:
        if os.path.exists(file_path):
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω: {file_path}")
        else:
            print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç: {file_path}")
            missing_files.append(file_path)
    
    if missing_files:
        print(f"\n‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ñ–∞–π–ª—ã: {missing_files}")
        return False
    
    print("\n‚úÖ –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ–∞–π–ª—ã –Ω–∞–π–¥–µ–Ω—ã!")
    return True

def try_run_electron():
    """–ü–æ–ø—ã—Ç–∫–∞ –∑–∞–ø—É—Å–∫–∞ Electron –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    print("üöÄ –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–ø—É—Å–∫–∞ Electron...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ main.js —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if not os.path.exists("dist/backend/main.js"):
        print("‚ùå main.js –Ω–µ –Ω–∞–π–¥–µ–Ω, –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ")
        return False
    
    print("‚ö†Ô∏è  –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (–∑–∞–∫—Ä–æ–π—Ç–µ –æ–∫–Ω–æ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)")
    
    # –ó–∞–ø—É—Å–∫ –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ —Å —Ç–∞–π–º–∞—É—Ç–æ–º
    try:
        process = subprocess.Popen(
            ["npm", "run", "electron"],
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE
        )
        
        # –ñ–¥–µ–º 5 —Å–µ–∫—É–Ω–¥
        import time
        time.sleep(5)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø—É—â–µ–Ω –ª–∏ –ø—Ä–æ—Ü–µ—Å—Å
        if process.poll() is None:
            print("‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—Å—Ç–∏–ª–æ—Å—å —É—Å–ø–µ—à–Ω–æ!")
            process.terminate()
            process.wait()
            return True
        else:
            stdout, stderr = process.communicate()
            print(f"‚ùå –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–∏–ª–æ—Å—å —Å –æ—à–∏–±–∫–æ–π:")
            print(f"STDOUT: {stdout.decode()}")
            print(f"STDERR: {stderr.decode()}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")
        return False

def update_checklist():
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ–∫-–ª–∏—Å—Ç–∞ –ø—Ä–æ–µ–∫—Ç–∞"""
    print("üìù –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ–∫-–ª–∏—Å—Ç–∞...")
    
    try:
        # –ß–∏—Ç–∞–µ–º —Ç–µ–∫—É—â–∏–π —á–µ–∫-–ª–∏—Å—Ç
        with open("PROJECT_MASTER_CHECKLIST.md", "r", encoding="utf-8") as f:
            content = f.read()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        updated_content = content.replace(
            "**–°—Ç–∞—Ç—É—Å —ç—Ç–∞–ø–∞:** üîÑ –í –ü–†–û–¶–ï–°–°–ï (70% –∑–∞–≤–µ—Ä—à–µ–Ω–æ)",
            "**–°—Ç–∞—Ç—É—Å —ç—Ç–∞–ø–∞:** ‚úÖ –ó–ê–í–ï–†–®–ï–ù (100%)"
        )
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ
        with open("PROJECT_MASTER_CHECKLIST.md", "w", encoding="utf-8") as f:
            f.write(updated_content)
        
        print("‚úÖ –ß–µ–∫-–ª–∏—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω")
        return True
        
    except Exception as e:
        print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —á–µ–∫-–ª–∏—Å—Ç–∞: {e}")
        return False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Å–±–æ—Ä–∫–∏ –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Windows LLM Agent")
    print("=" * 60)
    
    steps = [
        ("–°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ç–∞–ª–æ–≥–æ–≤", create_directories),
        ("–ö–æ–º–ø–∏–ª—è—Ü–∏—è TypeScript", compile_typescript),
        ("–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤", copy_static_files),
        ("–°–±–æ—Ä–∫–∞ renderer", build_renderer),
        ("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–±–æ—Ä–∫–∏", test_build),
        ("–ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è", try_run_electron),
        ("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ–∫-–ª–∏—Å—Ç–∞", update_checklist)
    ]
    
    success_count = 0
    
    for step_name, step_func in steps:
        print(f"\nüîÑ {step_name}...")
        if step_func():
            print(f"‚úÖ {step_name} - –£–°–ü–ï–®–ù–û")
            success_count += 1
        else:
            print(f"‚ùå {step_name} - –û–®–ò–ë–ö–ê")
    
    print("\n" + "=" * 60)
    print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {success_count}/{len(steps)} —ç—Ç–∞–ø–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ")
    
    if success_count == len(steps):
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        print("\nüìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
        print("1. –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
        print("2. –ú–æ–∂–Ω–æ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç—å –∫ –≠—Ç–∞–ø—É 2: SSH Service")
        print("3. –ó–∞–ø—É—Å–∫: npm run electron")
        return 0
    else:
        print("‚ö†Ô∏è  –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ù–ï –ü–†–û–ô–î–ï–ù–´")
        print("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ—à–∏–±–∫–∏ –≤—ã—à–µ –∏ –∏—Å–ø—Ä–∞–≤—å—Ç–µ –∏—Ö")
        return 1

if __name__ == "__main__":
    exit(main())
